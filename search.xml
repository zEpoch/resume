<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>5815. 扣分后的最大得分</title>
    <url>/2021/864291102.html</url>
    <content><![CDATA[<p>今天呢，上午还算是比较有空的，便是参加了<a
href="https://leetcode-cn.com/contest/weekly-contest-250/">一场 LeetCode
的周赛</a>，而且还是第一次的周赛，体验还是挺不错的。</p>
<span id="more"></span>
<p>上午室友回家，我也是跟着醒的比较早，起床去吃个饭，回来后把宿舍打扫了一遍，以后一个半月这就是我一人的寝室了，妙，然后又去洗了洗衣服，堆了一旬的衣服，感觉再不洗就要发馊了，于是呢，便是搓搓揉揉，又是到了十点半。我一看表，呕吼，周赛要开始了，赶紧拿着电脑跑到了图书馆，其实宿舍也是可以打比赛的，可惜在宿舍学都学不下去，比赛也会不想打的。</p>
<p>到了图书馆已是十点四十五了，问题也不算太大，毕竟是佛系参赛选手，虽然是第一次。</p>
<p>现在呢，算是结束了，刚刚吃完午饭回来，还是写一下吧。</p>
<hr />
<blockquote>
<p>给你一个 m x n 的整数矩阵 points （下标从 0 开始）。一开始你的得分为
0 ，你想最大化从矩阵中得到的分数。</p>
<p>你的得分方式为：每一行 中选取一个格子，选中坐标为 (r, c)
的格子会给你的总得分 增加 points[r][c] 。</p>
<p>然而，相邻行之间被选中的格子如果隔得太远，你会失去一些得分。对于相邻行
r 和 r + 1 （其中 0 &lt;= r &lt; m - 1），选中坐标为 (r, c1) 和 (r + 1,
c2) 的格子，你的总得分 减少 abs(c1 - c2) 。</p>
<p>请你返回你能得到的 最大 得分。</p>
<p>abs(x) 定义为：</p>
<p>如果 x &gt;= 0 ，那么值为 x 。 如果 x &lt; 0 ，那么值为 -x 。</p>
<p>示例 1：</p>
<p>1 2 <strong>3</strong></p>
<p>1 <strong>5</strong> 1</p>
<p><strong>3</strong> 1 1</p>
<p>输入：points = [[1,2,3],[1,5,1],[3,1,1]] 输出：9 解释：
蓝色格子是最优方案选中的格子，坐标分别为 (0, 2)，(1, 1) 和 (2, 0) 。
你的总得分增加 3 + 5 + 3 = 11 。 但是你的总得分需要扣除 abs(2 - 1) +
abs(1 - 0) = 2 。 你的最终得分为 11 - 2 = 9 。</p>
</blockquote>
<hr />
<p>那么这一题要怎么求解呢？显而易见，这是一道动态规划问题。</p>
<p>用 <span class="math inline">\(n\)</span> 表示行数，<span
class="math inline">\(m\)</span> 表示列数。</p>
<p>定义 <span class="math inline">\(f[i][j]\)</span> 表示前 <span
class="math inline">\(i\)</span> 行中，第 <span
class="math inline">\(i\)</span> 行选择 <span
class="math inline">\(\textit{points}[i][j]\)</span> 时的最大得分，则有
<span class="math display">\[
f[i][j]=points[i][j]+maxf[i−1][k]−∣k−j∣\tag{1}
\]</span> 拆掉绝对值符号，将上式变形为 <span class="math display">\[
f[i][j]=\left\{
\begin{matrix}
points[i][j]+maxf[i−1][k]-(j-k), k\leq j\\
points[i][j]+maxf[i−1][k]-(k-j), k&gt; j\\
\end{matrix}
\right.\tag{2}
\]</span> 将 <span class="math inline">\(j\)</span> 提出来，化简为 <span
class="math display">\[
f[i][j]= \left \{ \begin{matrix}
points[i][j]−j+maxf[i−1][k]+k,{k\leq j}\\
points[i][j]+j+maxf[i−1][k]−k,{k&gt; j}\\
\end{matrix} \right.\tag{3}
\]</span> 由上式可知，在计算 <span
class="math inline">\(f[i][j]\)</span> 时，我们需要知道位置 <span
class="math inline">\(j\)</span> 左侧的 <span
class="math inline">\(f[i-1][k] + k\)</span> 的最大值，以及位置 <span
class="math inline">\(j\)</span> 右侧的 <span
class="math inline">\(f[i-1][k] - k\)</span>
的最大值。这可以在计算完一整行 <span
class="math inline">\(f[i-1]\)</span>之后，在计算下一行 <span
class="math inline">\(f[i]\)</span> 之前，预处理出来。</p>
<p>在实现的时候，<span class="math inline">\(k \leq j\)</span> 和 <span
class="math inline">\(k&gt;j\)</span> 可以分开来实现，对于 <span
class="math inline">\(k \leq j\)</span>，可事先让 <span
class="math inline">\(k\)</span> 和 <span
class="math inline">\(j\)</span> 都从 0 开始，使得 <span
class="math inline">\(k \leq j\)</span>；对于<span
class="math inline">\(k&gt;j\)</span> 则是可以使得 <span
class="math inline">\(k\)</span> 从 <span
class="math inline">\(n-1\)</span> 开始，而 <span
class="math inline">\(j\)</span> 从 <span
class="math inline">\(n-2\)</span> 开始，使得 <span
class="math inline">\(k&gt;j\)</span> 。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">maxPoints</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span> <span class="token comment"># height</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># width</span>
        f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>n <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
            ans <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 从左到右</span>
                ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token comment"># 这里的 j 即为 k，k一定是小于等于 j 的</span>
                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> j <span class="token operator">+</span> ans<span class="token punctuation">)</span>
            
            ans <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> j <span class="token keyword">in</span>  <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 从右到左</span>
                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> j <span class="token operator">+</span> ans<span class="token punctuation">)</span>
                ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token comment"># 这里的 j 即为 k，k一定是大于等于 j 的</span>
        
        ans <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> ans     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如图所示：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210718142316758.png" /></p>
]]></content>
      <tags>
        <tag>LeetCode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/1243066710.html</url>
    <content><![CDATA[<p>终于呢，又是开通了我的博客，之所以是说终于，是因为之前也是开通过，但是呢，因为各种各样原因逐渐搁置，所以便是逐渐落下了博客的更新。</p>
<p>现在突然就想记录点什么了，希望能够记录下去吧。</p>
<p>Hexo&amp;Next.Pisces 重启，采用的 <a href="https://hexo.io/">Hexo</a>
开通的博客，<a href="https://theme-next.js.org/">NexT - Theme for
Hexo</a> 作为主题。</p>
<p>以后呢，会记录一下我的工作、学习与生活，会分享生活亦或是学习的点点滴滴，也不要再将这个站点落下了。</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next 友链配置</title>
    <url>/2021/851229289.html</url>
    <content><![CDATA[<p>在进行配置 Hexo Next
的友情链接的时候遇到了一些麻烦，特此进行记录如何进行 Hexo Next
友链的配置。</p>
<span id="more"></span>
<h3 id="创建一个友链界面">创建一个友链界面</h3>
<p>首先像创建其他的菜单栏一样创建一个新的菜单</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page links<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后呢，需要在主题的<code>_config.yml</code>文件中进行如下配置，即在最后一行加上<code>links: /links/ || fa fa-link</code></p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">home</span><span class="token punctuation">:</span> / <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>home
  <span class="token key atrule">tags</span><span class="token punctuation">:</span> /tags/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>tags
  <span class="token comment">#categories: /categories/ || fa fa-th</span>
  <span class="token key atrule">archives</span><span class="token punctuation">:</span> /archives/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>archive
  <span class="token comment">#schedule: /schedule/ || fa fa-calendar</span>
  <span class="token comment">#sitemap: /sitemap.xml || fa fa-sitemap</span>
  <span class="token comment">#commonweal: /404/ || fa fa-heartbeat</span>
  <span class="token key atrule">about</span><span class="token punctuation">:</span> /about/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>user
  <span class="token key atrule">links</span><span class="token punctuation">:</span> /links/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>link<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="写友链">写友链</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">blog/source/links/index.md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在<code>index.md</code>中写入以下内容便是配置完成啦！</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token font-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> 友情链接
<span class="token key atrule">type</span><span class="token punctuation">:</span> links</span>
<span class="token punctuation">---</span></span>

以下为本站的友情链接。

&#123;% linkgrid %&#125;
周涛的站点 | https://zepoch.github.io | 记录我的工作学习与生活 | https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/avatar.png

&#123;% endlinkgrid %&#125;

如有意交换友情链接，可在评论区留言，格式参考下方。为了确保头像显示正确，建议使用 Gravatar 或者 jsDelivr 等服务。如果需要更新博客信息，请留言回复。

&#123;% note success %&#125;

<span class="token list punctuation">-</span> 名称：周涛的站点
<span class="token list punctuation">-</span> 网址：https://zepoch.github.io/
<span class="token list punctuation">-</span> 简介：记录我的工作学习与生活
<span class="token list punctuation">-</span> 头像：https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/avatar.png

&#123;% endnote %&#125;

请您务必确保域名解析正确、https 证书有效且服务器工作正常。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考">参考</h3>
<p><a
href="https://theme-next.js.org/docs/tag-plugins/link-grid.html">Link
Grid | NexT (theme-next.js.org)</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>My name is Mingfei Lu, I like online computer game and panda!</title>
    <url>/2021/3623301362.html</url>
    <content><![CDATA[<p>一年一度，又是路明非的生日，书里的他已是大四在读，而我也将步入大四，但愿也能成长为能够独当一面的卡塞尔精英吧。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210717183450077.png" alt="image-20210717183450077" style="zoom:50%;" /></p>
<span id="more"></span>
<p><strong>人生若只如初见</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/640.webp"
alt="640" /></p>
<blockquote>
<p>可压力越大，路明非越懒，除了打打星际争霸，就是躺在床上望着屋顶发呆。</p>
<p>作为一个没什么存在感的人，他的懒惰其实不难理解。</p>
<p>……</p>
<p>只有路明非知道这野马般的生活多无聊，在网吧里坐到发腻之后，他就回家，进了楼却不进屋，而是上到天台，坐在嗡嗡响的空调机边，眺望这个城市，直到太阳西下。</p>
</blockquote>
<p><strong>小写的“i”</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/641.webp"
alt="641" /></p>
<blockquote>
<p>这一次，路明非看懂了。</p>
<p>身体从指尖一寸一寸地凉下来，凉到心里，凉到头盖骨深处，凉到那些因为采蒲公英跑了太多路还在酸痛的关节。</p>
<p>徐岩岩和徐淼淼是两个“o”，他是那个小写的“i”，合起来就是完美的，“陈雯雯，i
Love You。”</p>
<p>他是那个i，少他不成句，还是最风骚的小写。</p>
<p>以路明非的脑袋瓜子，想破了也想不出这样浪漫的手法，但是有人的脑袋瓜子比路明非好用，英语更比路明非强，从小就有英语家教嘛。</p>
<p>路明非看着陈雯雯，陈雯雯在看赵孟华，眼睛里仿佛蕴着夏夜的露水，就要流淌下来。她和路明非坐在河边的时候那么忧郁和沉默，这时候却不了，路明非看得出她眼里的快乐。</p>
<p>路明非觉得自己石化了，就要一点点碎掉了。他忽然想到自己包里的那束蒲公英，一路上跑过来，是不是零落得只剩下光秃秃的杆儿了？</p>
</blockquote>
<p><strong>1/4 诺诺</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/%E8%AF%BA%E8%AF%BA.webp"
alt="诺诺" /></p>
<blockquote>
<p>插在诺诺心口中的尾刺剧烈地颤动着，龙王一直没有拔出这根尾刺，可能只是要看这个女孩痛苦而缓慢地死去。但他意识到有什么不对，正试图彻底撕裂这个女孩。</p>
<p>“混账。”路明非说，口吻平静。</p>
<p>他抓住诺诺心口处的尾刺，全身骨骼发出爆裂的响声。他掰断了尾刺，把它随手丢在江水里。疼痛令龙王怒吼，但他不是立刻进攻路明非，而是抽回长尾迅速地远离。</p>
<p>不知为何路明非确信自己能做到这件事，此刻他血管里涌动着巨大的力量，灼热得像是岩浆奔流。</p>
<p>他不再是那个缩头缩脑的男孩，不会动不动吐槽，不会大惊小怪。他是控制者、权力者、发号施令者。</p>
</blockquote>
<p><strong>重临世界！</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/%E9%87%8D%E4%B8%B4%E4%B8%96%E7%95%8C.webp"
alt="重临世界" /></p>
<blockquote>
<p>龙疯狂地哀嚎，一瞬间能把人毁灭数百次的痛楚如千万刀刃流入他的脑内。</p>
<p>路明非松开“暴怒”的刀柄，踩着龙首跃空而起，如同希腊神话中那个以蜡封羽毛为羽翼飞向太阳的美少年伊卡洛斯，张开双臂，迎着黑暗中的火雨，仿佛要去拥抱并不存在的太阳，陶醉于它的光焰，全然不惧被高温烧毁了羽翼而坠落。</p>
<p>他没有坠落，他被狂风托住了。巨大的骨翼张开于背后，他以翼和身组成巨大的十字，立于虚空和黑暗之中，金色瞳孔中闪烁着愤怒、仇恨和君王之罚的冷酷。</p>
<p>他伸手向着下方的巨龙，说出了最终审判的圣言：</p>
<p>“我重临世界之日，诸逆臣皆当死去！”</p>
</blockquote>
<p><strong>樱花般的柔软</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/%E5%B0%8F%E6%A8%B1%E8%8A%B1.webp"
alt="小樱花" /></p>
<blockquote>
<p>一个潜水头盔扣在他脑袋上，氧气进入肺部，路明非的神志略微恢复。</p>
<p>头盔内部的灯照亮的了路明非的眼睛，他竭力想看清抱他的人，但眼前一片模糊。</p>
<p>这女孩的力量超越了路明非所见的任何混血种，诺诺凛然如一株玫瑰，抱他的女孩却有着樱花般的柔软。</p>
<p>他努力地看向手中，手中是一个黄色的橡皮鸭子。</p>
<p>“我不会死的，”他在心底轻声说，“因为你还没有……放弃我啊。”</p>
</blockquote>
<p><strong>拾萬零叁佰貳拾</strong></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/%E6%9C%80%E5%A5%BD%E7%9A%84%E5%B0%8F%E6%A8%B1%E8%8A%B1.webp"
alt="最好的小樱花" /></p>
<blockquote>
<p>“这样加上之前在我这里买的花票，总数是十万零三百二十张花票，恭喜小樱花，你通过了实习期，成为这个家庭的一员。”座头鲸忽然不闹腾了，从西装口袋里抽出一张支票，举过头顶给所有人看，投影机立刻把放大之后的支票投在舞台背景上，没错那是一张一亿日圆的支票，以今日的汇率来说，大约是95万美元。一张罕见的大额支票，座头鲸把那张支票投进服务生手中的金箱子，看着路明非说：“是的，有人希望你留下，几天前她来找过我。”</p>
</blockquote>
<blockquote>
<p>“04.24，和Sakura
去东京天空树，世界上最暖和的地方在天空树的顶上。”</p>
<p>“04.26，和Sakura 去明治神宫，有人在那里举办婚礼。”</p>
<p>“04.25，和Sakura
去迪士尼，鬼屋很可怕，但是有Sakura在，所以不可怕。”</p>
<p>“Sakura 最好了。”</p>
</blockquote>
]]></content>
      <tags>
        <tag>龙族</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery 入门</title>
    <url>/2022/2202928548.html</url>
    <content><![CDATA[<h1 id="jquery-入门">jQuery 入门</h1>
<h2 id="jquery-概述">jQuery 概述</h2>
<h2 id="javascript-库">JavaScript 库</h2>
<ul>
<li><p>JavaScript库：即
library，是一个封装好的特定的集合(方法和函数)。从封装一大堆函数的角度理解库，就是在这个库中，封装了很多预先定义好的函数在里面，比如动画animate、hide、show，比如获取元素等。</p></li>
<li><p>简单理解∶就是一个JS文件，里面对我们原生js代码进行了封装，存放到里面。这样我们可以快速高效的使用这些封装好的功能了。</p></li>
<li><p>比如jQuery，就是为了快速方便的操作DOM，里面基本都是函数(方法)。</p></li>
<li><p>常见的 JavaScript 库</p>
<ul>
<li><p>jQuery</p></li>
<li><p>Prototype</p></li>
<li><p>YUI</p></li>
<li><p>Ext JS</p></li>
<li><p>移动端的 zepto</p></li>
</ul></li>
</ul>
<span id="more"></span>
<h3 id="jquery-的概念">jQuery 的概念</h3>
<ul>
<li>jQuery 是一个快速、简洁的JavaScript库，其设计的宗旨是“write Less, Do
More”，即倡导写更少的代码，做更多的事情。</li>
<li>j 就是 JavaScript；Query查询;意思就是查询 js，把 js 中的DOM
操作做了封装，我们可以快速的查询使用里面的功能。</li>
<li>jQuery 封装了 JavaScript 常用的功能代码，优化了 DOM
操作、事件处理、动画设计和 Ajax 交互。</li>
<li>学习jQuery本质:就是学习调用这些函数(方法)。</li>
<li>jQuery出现的目的是加快前端人员的开发速度，我们可以非常方便的调用和使用它，从而提高开发效率。</li>
</ul>
<h2 id="jquery-的基本使用">jQuery 的基本使用</h2>
<h3 id="jquery-的入口函数">jQuery 的入口函数</h3>
<ul>
<li>$(function() { $('div').hide(); })</li>
<li>$(document).ready(function() { $('div').hide(); })</li>
<li>1．等着DOM结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery帮我们完成了封装。</li>
<li>2.相当于原生js 中的 DOMContentLoaded。</li>
<li>3．不同于原生js
中的load事件是等页面文档、外部的js文件、css文件、图片加载完毕才执行内部代码。</li>
</ul>
<h3 id="jquery-的顶级对象">jQuery 的顶级对象 $</h3>
<ul>
<li><ol type="1">
<li>$ 是 jQuery 的别称，在代码中可以使用 jQuery 代替
$，但一般为了方便，通常都直接使用 $。</li>
</ol></li>
<li><ol start="2" type="1">
<li>$ 是 jQuery 的顶级对象，相当于原生 JavaScript 中的window。把元素利用
$ 包装成 Query 对象，就可以调用 jQuery 的方法。</li>
</ol></li>
</ul>
<h3 id="jquery-对象和-dom-对象">jQuery 对象和 DOM 对象</h3>
<ul>
<li><h4 id="不同">不同</h4>
<ul>
<li><ol type="1">
<li>用原生 JS 获取来的对象就是 DOM 对象</li>
</ol></li>
<li><ol start="2" type="1">
<li>用 jQuery 方式获取过来的对象是 jQuery 对象。本质:通过$ 把 DOM
元素进行了包装</li>
</ol></li>
<li><ol start="3" type="1">
<li>jQuery 对象本质是∶利用 $ 对 DOM
对象包装后产生的对象（伪数组形式存储）。</li>
</ol></li>
</ul></li>
<li><h4 id="相互转换">相互转换</h4>
<ul>
<li><p>DOM对象与jQuery对象之间是可以相互转换的。</p></li>
<li><p>因为原生 js 比 jQuery 更大，原生的一些属性和方法 jQuery
没有给我们封装。要想使用这些属性和方法需要把 jQuery 对象转换为 DOM
对象才能使用。</p></li>
<li><ol type="1">
<li>DOM 对象转换为 jQuery 对象：$(DOM对象)</li>
</ol></li>
<li><ol start="2" type="1">
<li>jQuery 对象转换为 DOM 对象〔两种方式)</li>
</ol>
<ul>
<li>$('div')[index] //index是索引号</li>
<li>$('div).get(index) //index是索引号</li>
</ul></li>
</ul></li>
</ul>
<h2 id="jquery-常用-api">jQuery 常用 API</h2>
<h3 id="jquery-选择器">jQuery 选择器</h3>
<ul>
<li><h4 id="jquery-基础选择器">jQuery 基础选择器</h4>
<ul>
<li>原生JS获取元素方式很多，很杂，而且兼容性情况不一致，因此jQuery给我们做了封装，使获取元素统一标准。</li>
<li>$(“选择器”）//里面选择器直接写CSS选择器即可，但是要加引号</li>
</ul></li>
<li><h4 id="jquery-层级选择器">jQuery 层级选择器</h4>
<ul>
<li>子代选择器</li>
<li>后代选择器</li>
</ul></li>
<li><h4 id="隐式迭代">隐式迭代</h4>
<ul>
<li>遍历内部 DOM 元素（伪数组形式存储）的过程就叫做隐式迭代。</li>
<li>简单理解︰给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用。</li>
</ul></li>
<li><h4 id="jquery-筛选选择器">jQuery 筛选选择器</h4>
<ul>
<li>:first</li>
<li>:last</li>
<li>:eq(index)</li>
<li>:idd</li>
<li>:even</li>
</ul></li>
<li><h4 id="jquery-筛选方法重点">jQuery 筛选方法（重点）</h4>
<ul>
<li><p>parent()</p>
<ul>
<li>查找父级</li>
</ul></li>
<li><p>children(selector)</p>
<ul>
<li>最近一级亲儿子</li>
</ul></li>
<li><p>find(selector)</p>
<ul>
<li>相当于 $("ul li") ，后代选择器</li>
</ul></li>
<li><p>siblings(selector)</p>
<ul>
<li>查找兄弟节点，不包括自己本身</li>
</ul></li>
<li><p>nextAll([expr])</p>
<ul>
<li>查找当前元素之后所有的同辈元素</li>
</ul></li>
<li><p>prevAll([expr])</p>
<ul>
<li>查找当前元素之前所有的同辈元素</li>
</ul></li>
<li><p>hasClass(class)</p>
<ul>
<li>检查当前的元素是否含有某个特定的类，如果有，则返回 true</li>
</ul></li>
<li><p>eq(index)</p>
<ul>
<li>相当于 $("li:eq(2)") 从 0 开始</li>
</ul></li>
</ul></li>
</ul>
<h3 id="jquery-样式操作">jQuery 样式操作</h3>
<ul>
<li><h4 id="操作-css-方法">操作 CSS 方法</h4>
<ul>
<li><p>jQuery 可以使用 css
方法来修改简单元素样式；也可以操作类，修改多个样式。</p></li>
<li><ol type="1">
<li>参数只写属性名，则返回的是属性值</li>
</ol>
<ul>
<li>$("div").css("color");</li>
</ul></li>
<li><p>2.参数是属性名，属性值，逗号分隔，是设置一组样式，属性必须加号，值如果是数字可以不用跟单位和引号</p>
<ul>
<li>$("div").css("color", "red");</li>
</ul></li>
<li><p>3.参数可以是对象形式，方便设置多组样式。属性名和属性值用冒号隔开，属性可以不用加引号，</p>
<ul>
<li>$("div").css("color": "red","font-size":"20px");</li>
</ul></li>
</ul></li>
<li><h4 id="设置类样式方法">设置类样式方法</h4>
<ul>
<li><p>作用等同于以前的classList，可以操作类样式，注意操作类里面的参数不要加点。</p></li>
<li><ol type="1">
<li>添加类</li>
</ol>
<ul>
<li>$("div").addClass("current");</li>
</ul></li>
<li><ol start="2" type="1">
<li>删除类</li>
</ol>
<ul>
<li>$("div").removeClass("current");</li>
</ul></li>
<li><ol start="3" type="1">
<li>切换类</li>
</ol>
<ul>
<li>$("div").toggleClass("current");</li>
</ul></li>
</ul></li>
<li><h4 id="类操作与-classname-区别">类操作与 className 区别</h4>
<ul>
<li>原生JS中className会覆盖元素原先里面的类名。</li>
<li>jQuery里面类操作只是对指定类进行操作，不影响原先的类名。</li>
</ul></li>
</ul>
<h3 id="jquery-效果">jQuery 效果</h3>
<ul>
<li>jQuery给我们封装了很多动画效果，最为常见的如下∶</li>
<li><h4 id="显示隐藏">显示隐藏</h4>
<ul>
<li><p>show()</p>
<ul>
<li>show([speed, [easing], [fn]])</li>
<li>参数都可以省略，无动画直接显示</li>
<li>speed：三种预定速度之一的字符串（"slow", "normal",
"fast"）或表示动画时长的毫秒数值</li>
<li>easing：（Optional）用来指定切换效果，默认是 "swing"，可以用参数
"linear"</li>
</ul></li>
<li><p>hide()</p></li>
<li><p>toggle()</p></li>
</ul></li>
<li><h4 id="滑动">滑动</h4>
<ul>
<li><p>slideDown()</p></li>
<li><p>slideUp()</p></li>
<li><p>slideToggle()</p>
<ul>
<li>slideToggle([speed, [easing], [fn]])</li>
<li>( 2 ) speed :三种预定速度之一的字符串(“slow”, "normal",or
“fast”)或表示动画时长的毫秒数值(如∶1000)。</li>
<li>( 3 ) easing :
(Optional)用来指定切换效果，默认是“swing”，可用参数“linear”。</li>
<li>( 4 ) fn:回调函数，在动画完成时执行的函数，每个元素执行一次。</li>
</ul></li>
</ul></li>
<li><h4 id="淡入淡出">淡入淡出</h4>
<ul>
<li>fadeIn()</li>
<li>fadeOut()</li>
<li>fadeToggle()</li>
<li>fadeTo()</li>
</ul></li>
<li><h4 id="自定义动画">自定义动画</h4>
<ul>
<li>animate()</li>
</ul></li>
<li><h4 id="事件切换">事件切换</h4>
<ul>
<li>hover([over,] out)</li>
<li>( 1 ) over:鼠标移到元素上要触发的函数（相当于mouseenter )</li>
<li>( 2 ) out:鼠标移出元素要触发的函数（相当于mouseleave )</li>
</ul></li>
<li><h4 id="动画队列及其停止排队方法">动画队列及其停止排队方法</h4>
<ul>
<li><p>动画或效果队列</p>
<ul>
<li>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行。</li>
</ul></li>
<li><p>停止排队</p>
<ul>
<li>stop()</li>
<li>stop() 方法用于停止动画或效果。</li>
<li>注意: stop()
写到动画或者效果的前面，相当于停止结束上一次的动画。</li>
</ul></li>
</ul></li>
<li><h4 id="淡入淡出效果">淡入淡出效果</h4>
<ul>
<li><p>淡入效果语法规范</p>
<ul>
<li>fadeIn([speed, [easing], [fn]])</li>
</ul></li>
<li><p>淡入效果参数</p>
<ul>
<li>参数都可以省略</li>
<li>speed :三种预定速度之一的字符串(“slow”，"normal",or
“fast”)或表示动画时长的毫秒数值(如∶1000)。</li>
</ul></li>
<li><p>渐进方式调整到指定的不透明度</p>
<ul>
<li>fadeIn([[speed], opacity, [easing], [fn]])</li>
</ul></li>
<li><p>效果参数</p>
<ul>
<li>opacity透明度必须写，取值0~1之间。</li>
<li>speed :三种预定速度之一的字符串(“slow”,
"normal",or“fast”)或表示动画时长的毫秒数值(如:1000)。必须写</li>
<li>easing :
(Optional)用来指定切换效果，默认是“swing”，可用参数“linear”。</li>
</ul></li>
</ul></li>
<li><h4 id="自定义动画-animate">自定义动画 animate</h4>
<ul>
<li><p>语法</p>
<ul>
<li>animate(params, [speed], [easing], [fn])</li>
</ul></li>
<li><p>参数</p>
<ul>
<li>( 1 )
params:想要更改的样式属性，以对象形式传递，必须写。属性名可以不用带引号，如果是复合属性则需要采取驼峰命名法borderLeft。其余参数都可以省略。</li>
</ul></li>
</ul></li>
</ul>
<h3 id="jquery-属性操作">jQuery 属性操作</h3>
<ul>
<li><h4 id="设置或获取元素固有属性值-prop">设置或获取元素固有属性值
prop()</h4>
<ul>
<li><p>所谓元素固有属性就是元素本身自带的属性，比如&lt;a&gt;元素里面的href，比如&lt;input&gt;元素里面的type。</p></li>
<li><p>获取属性语法</p>
<ul>
<li>prop("属性")</li>
</ul></li>
<li><p>设置属性语法</p>
<ul>
<li>prop("属性", "属性值")</li>
</ul></li>
</ul></li>
<li><h4
id="设置或获取元素自定义属性值attr">设置或获取元素自定义属性值attr()</h4>
<ul>
<li><p>用户自己给元素添加的属性，我们称为自定义属性。比如给div添加index
= "1”。</p></li>
<li><p>获取属性语法</p>
<ul>
<li>attr("属性") // 类似原生 getAttribute()</li>
</ul></li>
<li><p>设置属性语法</p>
<ul>
<li>attr("属性", "属性值") // 类似原生 setAttribute()</li>
</ul></li>
<li><p>改方法也可以获取H5自定义属性</p></li>
</ul></li>
<li><h4 id="数据缓存data">数据缓存data()</h4>
<ul>
<li><p>data()方法可以在指定的元素上存取数据，并不会修改DOM元素结构。一旦页面刷新，之前存放的数据都将被移除.</p></li>
<li><p>附加数据语法</p>
<ul>
<li>data("name", "value") // 向被选元素附加数据</li>
</ul></li>
<li><p>获取数据语法</p>
<ul>
<li>data("name") // 向被选元素获取数据</li>
</ul></li>
<li><p>同时，还可以读取HTML5自定义属性data-index，得到的是数字型</p></li>
</ul></li>
</ul>
<h3 id="jquery-内容文本值">jQuery 内容文本值</h3>
<ul>
<li><p>主要针对元素的内容还有表单的值操作</p></li>
<li><ol type="1">
<li>普通元素内容 html()（相当于原生 innerHTML）</li>
</ol>
<ul>
<li>html() //获取元素的内容</li>
<li>html("内容") //设置元素的内容</li>
</ul></li>
<li><ol start="2" type="1">
<li>普通元素文本内容 text()（相当与原生 innerText）</li>
</ol>
<ul>
<li>text()</li>
<li>text("文本内容")</li>
</ul></li>
<li><ol start="3" type="1">
<li>表单的值 val() （相当于原生 value）</li>
</ol></li>
</ul>
<h3 id="jquery-元素操作">jQuery 元素操作</h3>
<ul>
<li>主要是遍历、创建、添加、删除元素操作</li>
<li><h4 id="遍历元素">遍历元素</h4>
<ul>
<li><p>jQuery
隐式迭代是对同一类元素做了同样的操作。如果想要给同一类元素做不同操作，就需要用到遍历。</p></li>
<li><p>语法1</p>
<ul>
<li>$ ( "div" ) .each (function (index,domEle) { xxx; })</li>
<li><ol type="1">
<li>each() 方法遍历匹配的每一个元素。主要用 DOM 处理。each每一个</li>
</ol></li>
<li><ol start="2" type="1">
<li>里面的回调函数有2个参数: index是每个元素的索引号； domEle 是每个 DOM
元素对象，不是 jquery 对象</li>
</ol></li>
<li><ol start="3" type="1">
<li>所以要想使用 jquery 方法，需要给这个 dom 元素转换为jquery 对象
$(domEle)</li>
</ol></li>
</ul></li>
</ul></li>
<li><h4 id="创建元素">创建元素</h4>
<ul>
<li><p>语法</p>
<ul>
<li><p>$("&lt;li&gt;&lt;/li&gt;");</p>
<ul>
<li>动态的创建了一个&lt;li&gt;</li>
</ul></li>
</ul></li>
</ul></li>
<li><h4 id="添加元素">添加元素</h4>
<ul>
<li><p>内部添加</p>
<ul>
<li><p>element,append("内容")</p>
<ul>
<li>把内容放入匹配元素内部最后面，类似原生appendChild。</li>
</ul></li>
<li><p>element,prepend("内容")</p>
<ul>
<li>把内容放入匹配元素内部最前面</li>
</ul></li>
</ul></li>
<li><p>外部添加</p>
<ul>
<li>element.after(""内容") //把内容放入目标元素后面</li>
<li>element.before(""内容"") //把内容放入目标元素前面</li>
</ul></li>
<li><p>内部添加元素，生成之后，它们是父子关系。外部添加元素，生成之后，他们是兄弟关系。</p></li>
</ul></li>
<li><h4 id="删除元素">删除元素</h4>
<ul>
<li>element.remove() //删除匹配的元素（本身)</li>
<li>element.empty() //删除匹配的元素集合中所有的子节点</li>
<li>element.html(") //清空匹配的元素内容</li>
</ul></li>
</ul>
<h3 id="jquery-尺寸位置操作">jQuery 尺寸、位置操作</h3>
<ul>
<li><h4 id="jquery-尺寸">jQuery 尺寸</h4>
<ul>
<li><p>width() / height()</p>
<ul>
<li>取得匹配元素宽度和高度值只算width / height</li>
</ul></li>
<li><p>innerWidth()/ innerHieght()</p>
<ul>
<li>取得匹配元素宽度和高度值包含 padding</li>
</ul></li>
<li><p>outerWidth() / outerHeight()</p>
<ul>
<li>取得匹配元素宽度和高度值包含 padding . border</li>
</ul></li>
<li><p>outerWidth(true) / outerHeight(true)</p>
<ul>
<li>取得匹配元素宽度和高度值包含padding . borde、margin</li>
</ul></li>
</ul></li>
<li><h4 id="jquery-位置">jQuery 位置</h4>
<ul>
<li><p>位置主要有三个:
offset()、position()、scrollTop()/scrollLeft()</p></li>
<li><p>offset() 设置或获取元素偏移</p>
<ul>
<li>offset()方法设置或返回被选元素相对于文档的偏移坐标，跟父级没有关系。</li>
<li>该方法有2个属性 left、top。offset().top
用于获取距离文档顶部的距离，offset().left
用于获取距离文档左侧的距离。</li>
<li>可以设置元素的偏移: offset({ top: 10, left: 30 });</li>
</ul></li>
<li><p>position() 获取元素偏移</p>
<ul>
<li>position()方法用于返回被选元素相对于带有定位的父级偏移坐标，如果父级都没有定位，则以文档为准。</li>
</ul></li>
<li><p>scrollTop()/scrollLeft() 设置或获取元素被卷去的头部和左侧</p>
<ul>
<li>scrollTop() 方法设置或返回被选元素被卷去的头部。</li>
</ul></li>
</ul></li>
</ul>
<h3 id="jquery-事件">jQuery 事件</h3>
<ul>
<li><h4 id="jquery-事件注册">jQuery 事件注册</h4>
<ul>
<li><h5 id="单个事件注册">单个事件注册</h5>
<ul>
<li>element.事件(function() {})</li>
<li>$("div").click(function() { 事件处理程序 })</li>
<li>其他事件与原生基本一致，比如
mouseover、mouseout、blur、focus、change、keydown、keyup、resize、scroll等</li>
</ul></li>
</ul></li>
<li><h4 id="jquery-事件处理">jQuery 事件处理</h4>
<ul>
<li><h5 id="事件处理-on-绑定事件">事件处理 on() 绑定事件</h5>
<ul>
<li><p>element.on(events, [selector], fn)</p></li>
<li><p>events：一个或多个用空格分隔的事性类型，如"click"或keydiown"</p></li>
<li><p>selector：元素的子元素选挥器</p></li>
<li><p>fn：回凋函数即绑定在元素身上的侦听函数</p></li>
<li><p>可以事件委派操作。事件委派的定义就是，把原来加给子元素身上的事件绑定在父元素身上，就是把事件委派给父元素.</p>
<ul>
<li>$ ( 'ul ' ).on ( ' click', 'li', function () { alert ( 'hello world!
'); } );</li>
</ul></li>
<li><p>在此之前有bind(), live()
delegate()等方法来处理事件绑定或者事件委派，最新版本的请用on替代他们。</p></li>
<li><p>动态创建的元素，click()没有办法绑定事件，on()可以给动态生成的元素绑定事件</p></li>
</ul></li>
</ul></li>
<li><h4 id="jquery-事件对象">jQuery 事件对象</h4>
<ul>
<li><h5
id="事件被触发就会有事件对象的产生">事件被触发，就会有事件对象的产生。</h5>
<ul>
<li>element.on(events, [selector], function(event) {})</li>
<li>阻止默认行为：event.preventDefault() 或者 return false</li>
<li>阻止冒泡：event.stopPropagation()</li>
</ul></li>
</ul></li>
</ul>
<h3 id="jquery-其他方法">jQuery 其他方法</h3>
<ul>
<li><h4 id="jquery-拷贝对象">jQuery 拷贝对象</h4>
<ul>
<li>如果想要把某个对象拷贝（合并）给另外一个对象使用，此时可以使用$.extend()方法</li>
<li>s.extend ( [deep], target,object1,[objectN ])</li>
<li><ol type="1">
<li>deep：如果设为 true 为深拷贝，默认为 false 浅拷贝</li>
</ol></li>
<li><ol start="2" type="1">
<li>target：要拷贝的目标对象</li>
</ol></li>
<li>3.object1：待拷贝到第一个对象的对象。</li>
<li><ol start="4" type="1">
<li>objectN:待拷贝到第N个对象的对象。</li>
</ol></li>
<li><ol start="5" type="1">
<li>浅拷贝是把被拷贝的对象复杂数据类型中的地址拷贝给目标对象，修改目标对象会影响被拷贝对象。</li>
</ol></li>
<li><ol start="6" type="1">
<li>深拷贝，前面加true，完全克隆(拷贝的对象,而不是地址)，修改目标对象不会影响被考贝对象。</li>
</ol></li>
</ul></li>
<li><h4 id="多库共存">多库共存</h4>
<ul>
<li><p>问题概述</p>
<ul>
<li>jQuery使用<span
class="math inline">\(作为标示符，随着jQuery的流行;其他js库也会用这\)</span>作为标识符，这样一起使用会引起冲突。</li>
</ul></li>
<li><p>客观需求</p>
<ul>
<li>需要一个解决方案，让jQuery和其他的js库不存在冲突，可以同时存在，这就叫做多库共存。</li>
</ul></li>
<li><p>jQuery 解决方案</p>
<ul>
<li>把里面的$符号统一改为jQuery。比如jQuery("div"")</li>
<li>jQuery变量规定新的名称: $.noConflict()<br />
var xx = $noConflict();</li>
</ul></li>
</ul></li>
<li><h4 id="jquery-插件">jQuery 插件</h4>
<ul>
<li><p>jQuery功能比较有限，想要更复杂的特效效果，可以借助于jQuery插件完成。</p></li>
<li><p>注意:这些插件也是依赖于jQuery来完成的，所以必须要先引入jQuery文件，因此也称为jQuery插件。</p></li>
<li><p>jQuery插件常用的网站</p>
<ul>
<li>jQuery插件库 http://www.jq22.com/</li>
<li>jQuery之家: http://www.htmleaf.com/</li>
</ul></li>
<li><p>fullPage.js</p></li>
<li><p>bootstrap JS 插件</p></li>
</ul></li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>PC&amp;移动端网页特效</title>
    <url>/2022/4031264998.html</url>
    <content><![CDATA[<h1 id="pc-端网页特效">PC 端网页特效</h1>
<h2 id="元素偏移量-offset-系列">元素偏移量 offset 系列</h2>
<ul>
<li><h3 id="offset-概述">offset 概述</h3>
<ul>
<li>offset 翻译过来就是偏移量，我们使用 offset
系列相关属性可以动态的得到该元素的位置（偏移）、大小等</li>
<li>获得元素距离带有定位父元素得到位置</li>
<li>获得元素自身的大小（宽度高度）</li>
<li>注意：返回的数值都不带单位 <span id="more"></span></li>
<li>常用属性
<ul>
<li><p>offsetTop</p></li>
<li><p>offsetLeft</p>
<ul>
<li>以带有定位的父亲为准</li>
</ul></li>
<li><p>offsetParent</p>
<ul>
<li>返回带有定位的父亲，否则返回 body</li>
</ul></li>
<li><p>offsetWidth</p></li>
<li><p>offsetHeight</p></li>
</ul></li>
</ul></li>
</ul>
<h2 id="元素可视区-client-系列">元素可视区 client 系列</h2>
<ul>
<li><h3 id="概述">概述</h3>
<ul>
<li>client 翻译过来就是客户端，我们使用 client
系列的相关属性来获取元素可视区的相关信息。通过client系列的相关属性可以动态的得到该元素的边框大小、元素大小等。</li>
</ul></li>
</ul>
<h2 id="元素滚动-scroll-系列">元素滚动 scroll 系列</h2>
<ul>
<li><h3 id="概述-1">概述</h3>
<ul>
<li>scroll 翻译过来就是滚动的，我们使用 scroll
系列的相关属性可以动态的得到该元素的大小、滚动距离等</li>
</ul></li>
<li><h4 id="动画函数封装">动画函数封装</h4>
<ul>
<li><h4 id="动画实现原理">动画实现原理</h4>
<ul>
<li>通过定时器 setInterval() 不断移动盒子位置</li>
</ul></li>
<li><h4 id="时间步骤">时间步骤</h4>
<ul>
<li>获取当前盒子位置</li>
<li>让盒子在当前位置加上 1 个移动距离</li>
<li>利用计时器不断重复这个操作</li>
<li>加一个结束定时器的条件</li>
<li>注意此元素需要添加定位，才能使用 element.style.left</li>
</ul></li>
<li><h4 id="缓动效果原理">缓动效果原理</h4>
<ul>
<li><p>缓动动画就是让元素运动速度有所变化，最常见的是让速度慢慢停下来</p></li>
<li><p>思路</p>
<ul>
<li><ol type="1">
<li>让盒子每次移动的距离慢慢变小，速度就会慢慢落下来</li>
</ol></li>
<li><ol start="2" type="1">
<li>核心算法：（目标值 - 现在的位置） / 10 做为每次移动的距离 步长</li>
</ol></li>
<li>停止的条件是：让当前盒子位置等于目标位置就停止定时器</li>
</ul></li>
</ul></li>
<li><h4 id="动画函数添加回调函数">动画函数添加回调函数</h4>
<ul>
<li><p>原理</p>
<ul>
<li>函数可以作为一个参数，将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数，这个过程就叫做回调。</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<h2 id="常见网页特效案例">常见网页特效案例</h2>
<ul>
<li>轮播图</li>
<li>回到顶部</li>
<li>筋斗云案例</li>
</ul>
<h1 id="移动网页端特效">移动网页端特效</h1>
<h2 id="触屏事件">触屏事件</h2>
<h3 id="触屏事件概述">触屏事件概述</h3>
<ul>
<li>移动端浏览器兼容性好，无需考虑兼容性问题，可以放心使用原生 JS
书写效果，但是移动端有自己独特的地方。比如触屏事件 touch
（也称触摸事件），Android 和 IOS 都有</li>
</ul>
<h3 id="触摸事件对象">触摸事件对象</h3>
<ul>
<li>touchstart</li>
<li>touchmove</li>
<li>touchend</li>
</ul>
<h3 id="移动端拖动元素">移动端拖动元素</h3>
<ul>
<li><ol type="1">
<li>touchstart、touchmove、touchend可以实现拖动元素</li>
</ol></li>
<li><ol start="2" type="1">
<li>但是拖动元素需要当前手指的坐标值 我们可以使用 targetTouches[0]
里面的 pageX 和 pageY</li>
</ol></li>
<li><ol start="3" type="1">
<li>移动端拖动的原理：手指移动中，计算出手指移动的距离。然后用盒子原来的位置
+ 手指移动的距离</li>
</ol></li>
<li><ol start="4" type="1">
<li>手指移动的距离： 手指滑动中的位置 减去 手指刚开始触摸的位置</li>
</ol></li>
<li><p>拖动三部曲</p>
<ul>
<li>触摸元素 touchstart：获取手指初始坐标，同时获得盒子原来的位置</li>
<li>移动手指 touchmove：计算手指的滑动距离，并且移动盒子</li>
<li>离开手指 touchend：</li>
</ul></li>
<li><p>注意：手指移动也会触发滚动屏幕，所以这里要阻止默认的屏幕滚动
e.preventDefault()</p></li>
<li><p>移动端常见特效</p>
<ul>
<li><p>案例：移动端轮播图</p>
<ul>
<li><ol type="1">
<li>可以自动播放图片</li>
</ol></li>
<li><ol start="2" type="1">
<li>手指可以拖动播放轮播图</li>
</ol></li>
</ul></li>
</ul></li>
<li><p>移动端常用开发插件</p></li>
<li><p>移动端常用开发框架</p>
<ul>
<li>fastclick</li>
<li>swiper</li>
<li>bootstrap</li>
</ul></li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlzoo练习规划</title>
    <url>/2021/387524820.html</url>
    <content><![CDATA[<p>推荐一个SQL查询语句在线练习网站——<a
href="https://sqlzoo.net/wiki/SQL_Tutorial/zh">SQLZOO</a>，这个网站上的题目由易到难，把整个网站上的题目都做完的话你可以自主的写出接近100条SQL查询语句，从简单的单表条件查询到多表联结查询，自联结查询等等。</p>
<p>官网：https://sqlzoo.net/wiki/SQL_Tutorial/zh</p>
<span id="more"></span>
<h5 id="sql基础">sql基础</h5>
<ul>
<li><p>sql基础：https://sqlzoo.net/wiki/SELECT_basics/zh</p></li>
<li><p>文字样式匹配查询：https://sqlzoo.net/wiki/SELECT_names/zh</p></li>
<li><p>select测试：https://sqlzoo.net/wiki/SELECT_Quiz/zh</p></li>
</ul>
<h5 id="一般查询">一般查询</h5>
<ul>
<li><p>World表查询：https://sqlzoo.net/wiki/SQLZOO:SELECT_from_WORLD_Tutorial/zh</p></li>
<li><p>World表测试：https://sqlzoo.net/wiki/BBC_QUIZ/zh</p></li>
<li><p>Nobel表查询：https://sqlzoo.net/wiki/SELECT_from_Nobel_Tutorial/zh</p></li>
<li><p>Nobel表测试：https://sqlzoo.net/wiki/Nobel_Quiz/zh</p></li>
</ul>
<h5 id="子查询">子查询</h5>
<ul>
<li><p>子查询原理：https://sqlzoo.net/wiki/Using_nested_SELECT/zh</p></li>
<li><p>子查询练习：https://sqlzoo.net/wiki/SELECT_within_SELECT_Tutorial/zh</p></li>
<li><p>Nobel子查询：https://sqlzoo.net/wiki/The_nobel_table_can_be_used_to_practice_more_subquery./zh</p></li>
<li><p>子查询测试：https://sqlzoo.net/wiki/Nested_SELECT_Quiz/zh</p></li>
</ul>
<h5 id="聚合函数和null">聚合函数和Null</h5>
<ul>
<li><p>聚合函数练习1：https://sqlzoo.net/wiki/SUM_and_COUNT/zh</p></li>
<li><p>聚合函数练习2：https://sqlzoo.net/wiki/The_nobel_table_can_be_used_to_practice_more_SUM_and_COUNT_functions./zh</p></li>
<li><p>聚合函数测试：https://sqlzoo.net/wiki/SUM_and_COUNT_Quiz</p></li>
<li><p>Null值练习1：https://sqlzoo.net/wiki/Using_Null/zh</p></li>
<li><p>Null值练习2：https://sqlzoo.net/wiki/Scottish_Parliament/zh</p></li>
<li><p>Null值测试：https://sqlzoo.net/wiki/Using_Null_Quiz</p></li>
</ul>
<h5 id="表连接">表连接</h5>
<ul>
<li><p>表连接练习1：https://sqlzoo.net/wiki/The_JOIN_operation/zh</p></li>
<li><p>表连接练习2：https://sqlzoo.net/wiki/Music_Tutorial/zh</p></li>
<li><p>表连接测试1：https://sqlzoo.net/wiki/JOIN_Quiz</p></li>
<li><p>表连接练习3：https://sqlzoo.net/wiki/More_JOIN_operations/zh</p></li>
<li><p>表连接测试2：https://sqlzoo.net/wiki/JOIN_Quiz_2</p></li>
</ul>
<h5 id="自连接及函数">自连接及函数</h5>
<ul>
<li><p>自连接练习：https://sqlzoo.net/wiki/Self_join/zh</p></li>
<li><p>自连接测试：https://sqlzoo.net/wiki/Self_join_Quiz</p></li>
<li><p>常用函数：https://sqlzoo.net/wiki/Functions_Reference</p></li>
</ul>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>tensorflow入门</title>
    <url>/2022/3652601009.html</url>
    <content><![CDATA[<p>首先是 tensorflow 及其相关包的安装，作者本人使用的是
miniconda，安装命令如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create -n <span class="token string">'tensorflow'</span>
activate tensorflow
conda <span class="token function">install</span> -c conda-forge tensorflow
conda <span class="token function">install</span> scikit-learn
conda <span class="token function">install</span> -c conda-forge pandas
conda <span class="token function">install</span> -c conda-forge matplotlib
conda <span class="token function">install</span> -c conda-forge seaborn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<p>代码仓库为 <code>deeplearning-ai</code> 的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/https-deeplearning-ai/tensorflow-1-public<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>首先要讲一下机器学习和传统编程的区别，传统编程在于通过输入规则和数据，得到结果；机器学习则是通过输入结果和数据，得到规则，即如下图所示
<img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/tensorflow入门/20220409151732.png"
alt="20220409151732" /></p>
<p>首先可以做一个例子 x = -1, 0, 1, 2, 3, 4 y = -3, -1, 1, 3, 5, 7
那么可以很清晰的看出 y=2*x+1,但是如何通过机器学习得到这个规则呢？用
tensorflow 就可以比较方便</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> keras<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">[</span>keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'sgd'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loss<span class="token operator">=</span><span class="token string">'mean_squared_error'</span><span class="token punctuation">)</span>

xs <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">)</span>
ys <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">7.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">)</span>
model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xs<span class="token punctuation">,</span> ys<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>即使用 keras 定义一个模型，optimizer 选用 sgd
函数，损失函数为均方损失，使用fit进行训练完成即可。</p>
]]></content>
      <tags>
        <tag>tensorflow</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 API 与 DOM 的理解</title>
    <url>/2022/1979900830.html</url>
    <content><![CDATA[<h1 id="关于-api">关于 API</h1>
<h2 id="api">API</h2>
<p>Application Programming Interface，
应用程序编程接口，是一些预先定于的函数，目的是提供应用程序与开发人员基于某硬件或软件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p>
<p>API是给程序员提供的某种工具，以便能更轻松的实现想要完成的功能</p>
<h2 id="web-api">WEB API</h2>
<p>是浏览器提供的一套操作浏览器功能和页面元素的API（BOM和DOM），MDN API:
https://developer.mozilla.org/zh-CN/docs/Web/API</p>
<span id="more"></span>
<h1 id="dom">DOM</h1>
<h2 id="dom-简介">DOM 简介</h2>
<h3 id="什么是-dom">什么是 DOM</h3>
<p>文档对象模型（Document Object Model，简称
DOM），是W3C组织推荐的处理可拓展标记语言（HTML 或者
XML）的标准编程接口</p>
<h3 id="dom树">DOM树</h3>
<p>W3C已经定义了一系列的DOM接口，通过这些 DOM
可以改变网页的结构和样式</p>
<p>文档：一个页面就是一个文档，DOM中使用 document 表示</p>
<p>元素：页面中的所有标签都是元素，DOM中使用 element 表示</p>
<p>节点：网页中所有内容都是节点（标签、属性、文本、注释等），DOM中使用
node 表示</p>
<h2 id="获取元素">获取元素</h2>
<h3 id="通过-id-获取">通过 ID 获取</h3>
<p>通过 getElementById() 方法可以获取带有id对象</p>
<h3 id="通过标签名获取">通过标签名获取</h3>
<p>使用 getElementsByTagName()
方法可以返回带有指定标签名的对象的集合</p>
<h3 id="通过-html5-新增的方法获取">通过 HTML5 新增的方法获取</h3>
<p>document.getElementsByClassName('类名')
//根据类名获得某些元素集合</p>
<p>document.querySelector("选择器") //返回的是第一个元素对象
选择器需要加符号</p>
<p>document.querySelectorAll() //返回指定选择器的所有元素对象集合</p>
<h3 id="特殊元素获取">特殊元素获取</h3>
<p>获得body元素：document.body</p>
<p>获得html元素：document.documentElement</p>
<h2 id="事件基础">事件基础</h2>
<p>触发-响应机制</p>
<h3 id="三要素">三要素</h3>
<p>事件源：事件被触发的对象，比如按钮之类的</p>
<p>事件类型：如何触发 什么事件 比如鼠标点击 还是鼠标经过
还是键盘按下</p>
<p>事件处理程序：通过一个函数赋值的方式完成</p>
<p>执行事件的步骤：获取事件源--注册事件（绑定事件）--添加事件处理程序（采取函数赋值形式）</p>
<h2 id="操作元素">操作元素</h2>
<h3 id="改变元素内容">改变元素内容</h3>
<p>element.innerText
//从起始位置到终止位置的内容，但它去除html标签，同时空格和换行也会去掉</p>
<p>element.innerHTML
//起始位置到终止位置的全部内容，包括html标签，同时保留空格和换行</p>
<h3 id="常用元素的属性操作">常用元素的属性操作</h3>
<p>innerText、innerHTML 改变元素内容</p>
<p>src、href</p>
<p>id、alt、title</p>
<h3 id="表单元素设置">表单元素设置</h3>
<p>对于input盒子，需要通过value来进行修改，比如 input.value</p>
<p>想要某个表单被禁用，可以使用 btn.disabled = true; 或是 this.disabled
= true，this 指向事件函数的调用者</p>
<h4 id="案例分析">案例分析</h4>
<p>京东的密码可见可不见</p>
<h3 id="样式属性操作">样式属性操作</h3>
<p>element.style 行内样式操作</p>
<p>element.className 类名样式操作</p>
<h4 id="案例">案例</h4>
<h5 id="淘宝小窗口关闭">淘宝小窗口关闭</h5>
<h5 id="循环精灵图">循环精灵图</h5>
<p>​ 首先精灵图图片排列有规律的</p>
<p>​ 核心思路：利用 for 循环，修改精灵图片的背景位置
background-position</p>
<p>​ 数学功底</p>
<p>​ 显示隐藏文本框内容</p>
<p>​ 注册时提示密码应该具有一定的复杂性</p>
<h3 id="排他思想">排他思想</h3>
<p>​
如果有同一组元素，我们想要某一个元素实现某种样式，需要用到循环的排他思想</p>
<p>​ 所有元素全部清除样式</p>
<p>​ 给当前元素设置样式</p>
<h4 id="案例-1">案例</h4>
<h5 id="百度换肤">百度换肤</h5>
<h5 id="表格隔行变色">表格隔行变色</h5>
<p>​ 鼠标经过 onmouseover，鼠标离开 onmouseout</p>
<p>​ 核心思路：鼠标经过 tr
行，当前的行变背景颜色，鼠标离开去掉当前的背景颜色</p>
<p>​ thead里面的行并不需要变颜色</p>
<h5 id="表单全选取消全选案例">表单全选取消全选案例</h5>
<p>​
全选和取消去选按钮，让下面所有的复选框的checked属性跟随全选按钮即可，下面复选框需要全部选中，上面全选才能选中，设置一个变量，控制是选中了还是没有选中</p>
<h3 id="自定义属性的操作">自定义属性的操作</h3>
<h4 id="获取属性值">获取属性值</h4>
<p>​ element.属性：获取元素自带的属性</p>
<p>​ element.getAttribute("属性")：主要获取我们自定义的属性</p>
<h4 id="设置属性值">设置属性值</h4>
<p>​ element.setAttribute("属性",“值”)，主要针对自定义属性，element.属性
= 值</p>
<h4 id="移除属性">移除属性</h4>
<p>​ removeAttribute("属性")</p>
<h4 id="案例-tab健切换">案例 tab健切换</h4>
<h3 id="h5-自定义属性">H5 自定义属性</h3>
<p>是为了保存并使用数据，有些数据可以保存到页面中而不用保存到数据库中</p>
<h4 id="设置h5自定义属性">设置h5自定义属性</h4>
<p>​ H5 规定自定义属性 data- 开头做属性名并且赋值</p>
<h4 id="获取-h5自定义属性">获取 H5自定义属性</h4>
<p>​ getAttribute("属性")</p>
<p>​ element.dataset.index</p>
<p>​ element.dataset["index"]</p>
<h2 id="节点操作">节点操作</h2>
<h3 id="为什么节点操作">为什么节点操作？</h3>
<p>利用DOM提供的方法获取元素，但是繁琐，逻辑性不强</p>
<p>利用节点层级关系获取元素</p>
<h3 id="节点概述">节点概述</h3>
<p>一般地，节点至少拥有nodeType（节点类型）、nodeName（节点名称）、nodeValue（节点值）这三个基本属性</p>
<h3 id="节点层级">节点层级</h3>
<p>常见为父子兄层级关系</p>
<h4 id="父级节点parentnodes">父级节点：parentNodes</h4>
<h4 id="子节点">子节点</h4>
<p>​ childNodes：得到所有子节点</p>
<p>​ children：非标准，获取所有的子元素节点</p>
<p>​ firstChild</p>
<p>​ lastChild</p>
<p>​ firstElementChild</p>
<p>​ lastElementChild</p>
<h4 id="兄弟节点">兄弟节点</h4>
<p>​ nextSibling</p>
<p>​ previousSibling</p>
<p>​ nextElementSibing</p>
<p>​ previousElementSibling</p>
<h4 id="创建节点">创建节点</h4>
<p>document.createElement('tagName')，因为这些元素原先不存在，是根据我们的需求动态生成的，所以我们也成为动态创建元素节点</p>
<h4 id="添加节点">添加节点</h4>
<p>node.appendChild(child)：后面追加元素</p>
<p>node.insertBefore(child,指定元素)：前面插入元素</p>
<h4 id="案例-2">案例</h4>
<p>留言发布案例</p>
<h4 id="删除节点">删除节点</h4>
<p>node.removeChild(child)：从 DOM 中删除一个子节点，返回删除的节点</p>
<h4 id="复制节点">复制节点</h4>
<p>node.cloneNode()：参数为空为浅拷贝，只复制节点本身，不复制内容，true
则是复制标签&amp;复制内容</p>
<h4 id="案例-3">案例</h4>
<h5 id="动态生成表格">动态生成表格</h5>
<p>​ 数据采用对象形式存储，所有的数据放到tbody中，循环创建行</p>
<h4 id="三种动态创建元素区别">三种动态创建元素区别</h4>
<p>document.write()，直接将内容写入页面的内容流，但是文档流执行完毕，则它会导致页面全部重绘
element.innerHTML()</p>
<p>document.createElement()</p>
<h2 id="dom核心重点">DOM核心重点</h2>
<h3 id="创建">创建</h3>
<p>document.write，innerHTML，createElement</p>
<h3 id="增">增</h3>
<p>appendChild，insertBefore</p>
<h3 id="删">删</h3>
<p>removeChild</p>
<h3 id="改">改</h3>
<p>修改元素属性：src href title等</p>
<p>修改普通元素属性：innerHTML innerText</p>
<p>修改表单元素：value type disabled</p>
<p>修改元素样式：style className</p>
<h3 id="查">查</h3>
<p>DOM 提供的 API 方法： getElementById、getElemensByTagName</p>
<p>H5提供的新方法：querySelector querySelectorAll （提倡）</p>
<p>利用节点操作获取元素：父（parentNode）子（children）
兄（previousElementSibling、nextELementSibling）（提倡）</p>
<h4 id="属性操作">属性操作</h4>
<p>setAttribute 设置dom的属性值，getAttribute
得到dom的属性值，removeAttribute 移除属性</p>
<h4 id="事件操作">事件操作</h4>
<p>给事件注册元素，采取 事件源.事件类型 = 事件处理程序</p>
<h5 id="鼠标事件">鼠标事件</h5>
<p>​ onclick：鼠标点击左键触发</p>
<p>​ onmouseover：鼠标经过触发</p>
<p>​ onmouseout：鼠标离开触发</p>
<p>​ onfocus：获取鼠标焦点触发</p>
<p>​ onblur：失去鼠标焦点触发</p>
<p>​ onmousemove：鼠标移动触发</p>
<p>​ onmouseup：鼠标弹起触发</p>
<p>​ onmousedown：鼠标按下触发</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 AJAX 的理解</title>
    <url>/2022/745948327.html</url>
    <content><![CDATA[<h2 id="原生ajax">原生AJAX</h2>
<h3 id="ajax-简介">1.1 AJAX 简介</h3>
<p>AJAX 全称为Asynchronous JavaScript And XML，就是异步的 JS 和 XML。
通过AJAX
可以在浏览器中向服务器发送异步请求，最大的优势：无刷新获取数据。 AJAX
不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。
<span id="more"></span></p>
<h3 id="xml-简介">1.2 XML 简介</h3>
<p>XML 可扩展标记语言。 XML 被设计用来传输和存储数据。 XML 和 HTML
类似，不同的是 HTML 中都是预定义标签，而 XML 中没有预定义标签，
全都是自定义标签，用来表示一些数据。 比如说我有一个学生数据：</p>
<blockquote>
<p>name = "孙悟空" ; age = 18 ; gender = "男" ;</p>
</blockquote>
<p>用 XML 表示：</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>孙悟空<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gender</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gender</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用 JSON 表示：</p>
<pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="ajax-的特点">1.3 AJAX 的特点</h3>
<h4 id="ajax-的优点">1.3.1 AJAX 的优点</h4>
<ol type="1">
<li>可以无需刷新页面而与服务器端进行通信。</li>
<li>允许你根据用户事件来更新部分页面内容。</li>
</ol>
<h4 id="ajax-的缺点">1.3.2 AJAX 的缺点</h4>
<ol type="1">
<li>没有浏览历史，不能回退</li>
<li>存在跨域问题(同源)</li>
<li>SEO 不友好</li>
</ol>
<h3 id="ajax-的使用">1.4 AJAX 的使用</h3>
<h4 id="核心对象">1.4.1 核心对象</h4>
<p>XMLHttpRequest，AJAX 的所有操作都是通过该对象进行的。</p>
<h4 id="使用步骤">1.4.2 使用步骤</h4>
<ol type="1">
<li><p>创建XMLHttpRequest 对象</p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></li>
<li><p>设置请求信息</p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//可以设置请求头，一般不设置</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li>
<li><p>发送请求</p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token comment">//get 请求不传body 参数，只有post 请求使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></li>
<li><p>接收响应</p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//xhr.responseXML 接收xml 格式的响应数据</span>
<span class="token comment">//xhr.responseText 接收文本格式的响应数据</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> text <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
</ol>
<h4 id="解决ie-缓存问题">1.4.3 解决IE 缓存问题</h4>
<p>问题：在一些浏览器中(IE),由于缓存机制的存在，ajax
只会发送的第一次请求，剩余多次请求不会在发送给浏览器而是直接加载缓存中的数据。</p>
<p>解决方式：浏览器的缓存是根据url 地址来记录的，所以我们只需要修改url
地址即可避免缓存问题.</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"/testAJAX?t="</span><span class="token operator">+</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="ajax-请求状态">1.4.4 AJAX 请求状态</h4>
<p>xhr.readyState 可以用来查看请求当前的状态 <a
href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState"
class="uri">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState</a></p>
<blockquote>
<p>0: 表示 XMLHttpRequest 实例已经生成，但是
open()方法还没有被调用。<br />
1: 表示 send()方法还没有被调用，仍然可以使用 setRequestHeader()，设定
HTTP 请求的头信息。<br />
2: 表示 send()方法已经执行，并且头信息和状态码已经收到。<br />
3: 表示正在接收服务器传来的 body 部分的数据。<br />
4: 表示服务器数据已经完全接收，或者本次接收已经失败了</p>
</blockquote>
<h2 id="jquery-中的ajax">jQuery 中的AJAX</h2>
<h3 id="get-请求">2.1 get 请求</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>url:请求的URL 地址。<br />
data:请求携带的参数。<br />
callback:载入成功时回调函数。<br />
type:设置返回内容格式，xml, html, script, json, text, &gt;_default。</p>
</blockquote>
<h3 id="post-请求">2.2 post 请求</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>url:请求的URL 地址。<br />
data:请求携带的参数。<br />
callback:载入成功时回调函数。<br />
type:设置返回内容格式，xml, html, script, json, text,_default。</p>
</blockquote>
<h2 id="跨域">跨域</h2>
<h3 id="同源策略">3.1 同源策略</h3>
<p>同源策略(Same-Origin Policy)最早由 Netscape
公司提出，是浏览器的一种安全策略. 同源： 协议、域名、端口号
必须完全相同。 违背同源策略就是跨域。</p>
<h3 id="如何解决跨域">3.2 如何解决跨域</h3>
<h4 id="jsonp">3.2.1 JSONP</h4>
<h5 id="jsonp-是什么">1) JSONP 是什么</h5>
<p>JSONP(JSON with
Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，只支持get
请求。</p>
<h5 id="jsonp-怎么工作的">2) JSONP 怎么工作的？</h5>
<p>在网页有一些标签天生具有跨域能力，比如：img link iframe script。
JSONP 就是利用script 标签的跨域能力来发送请求的。</p>
<h5 id="jsonp-的使用">3) JSONP 的使用</h5>
<p>1.动态的创建一个script 标签</p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<p>2.设置script 的src，设置回调函数</p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http://localhost:3000/testAJAX?callback=abc"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>3.将script 添加到body 中</p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<p>4.服务器中路由的处理</p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/testAJAX"</span> <span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req <span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"收到请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> callback <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback<span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token number">18</span>
  <span class="token punctuation">&#125;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>callback<span class="token operator">+</span><span class="token string">"("</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h5 id="jquery-中的jsonp">4) jQuery 中的JSONP</h5>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./jquery-1.12.3.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>
      btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  
        $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">"http://api.douban.com/v2/movie/in_theaters?callback=?"</span><span class="token punctuation">,</span>
        <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">//获取所有的电影的条目</span>
          <span class="token keyword">var</span> subjects <span class="token operator">=</span> data<span class="token punctuation">.</span>subjects<span class="token punctuation">;</span>
          <span class="token comment">//遍历电影条目</span>
          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>subjects<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>
              <span class="token string">"&lt;li>"</span><span class="token operator">+</span>
              subjects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token operator">+</span><span class="token string">"&lt;br />"</span><span class="token operator">+</span>
              <span class="token string">"&lt;img src=\""</span><span class="token operator">+</span>subjects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>images<span class="token punctuation">.</span>large<span class="token operator">+</span><span class="token string">"\" >"</span><span class="token operator">+</span>
              <span class="token string">"&lt;/li>"</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="cors">3.2.2 CORS</h4>
<p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS"
class="uri">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p>
<h5 id="cors-是什么">1) CORS 是什么？</h5>
<p>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS
是官方的跨域解决方
案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持
get 和post 请求。跨域资源共享标准新增了一组HTTP
首部字段，允许服务器声明哪些 源站通过浏览器有权限访问哪些资源</p>
<h5 id="cors-怎么工作的">2) CORS 怎么工作的？</h5>
<p>CORS
是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应
以后就会对响应放行。</p>
<h5 id="cors-的使用">3) CORS 的使用</h5>
<p>主要是服务器端的设置：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/testAJAX"</span> <span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req <span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//通过res 来设置响应头，来允许跨域请求</span>
  <span class="token comment">//res.set("Access-Control-Allow-Origin","http://127.0.0.1:3000");</span>
  res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"testAJAX 返回的响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>jQuery</tag>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>不要死，也不要孤独的生活</title>
    <url>/2021/3084145281.html</url>
    <content><![CDATA[<p>打开新闻首页，密密麻麻的标题，独唱团大卖了，北京公交自燃了，贾宏声跳楼了。</p>
<p>贾宏声是谁？这名字似乎听过，然而完全没印象了。点开新闻，说是周迅前男友，一博客说他从楼下跳下，砸坏了一辆车，口气好象很心痛那车。另一博客开始呼吁社会关心明星心理健康……</p>
<p>还是不知道贾宏声是谁，也不想知道。每天死的人太多了，我关心不过来。</p>
<span id="more"></span>
<p>又在网上乱逛，打开另一个门户，又看到这新闻，看来他终于红了。点开，突然看到了一张照片和一段话。</p>
<p>我又一次梦见了那条龙，他盘在屋顶上，两只眼睛死死的盯着我，他问我你是谁？我说我是贾宏声，他说贾宏声又是谁?我说贾宏声毕业于中央戏剧学院，是个演员，热爱摇滚乐，爱列侬和罗伯特普兰特，曾经想成为个名伟大的演员，也想组建一支伟大的乐队。他说你什么都不是，就是一个人，你爱吃面条，鸡蛋，爱穿时髦的衣服，可以哭也可以笑，受不了的时候还可以求人。我问他我为什么在这呢?他说这是对你的惩罚，因为你身上恶的东西太多了，必须把这些恶的东西清理出去，你才能彻底干净。我问他我干净了吗？他没有回答，两只眼睛还是死死的盯着我，然后就飞走了，你就是一个人你就是一个人一个人你就是一个人你就是一个人。</p>
<p>看到这双死死瞪着的眼睛，我突然想起这个人是谁了。</p>
<p>很早的时候，听过这段话，是中央六台放的电影《昨天》。那是一个关于……我不知道应该怎么介绍这主题……关于一个精神病人的故事？我只知道那里面贾宏声就叫贾宏声，他电影中的父母也是他真正的父母，他演得是他的昨天，是他自己，是真实的故事。</p>
<p>那是一部让人看完心里很难平静的电影，因为这电影和其他电影不一样，完全不娱乐，而且看着很窝心。你看到了某种真实，在荒诞下的真实，一个不正常的人，做着不正常的事，有着完全不正常的心理。他活的与世界格格不入，他想追求一些东西，但他自己也不知道那是什么，结果自己和自己较劲，自己痛苦，而且搞得周围的人都痛苦，越爱他的人越痛苦。</p>
<p>这种人当然不是主流，他们就是典型的极少数一小撮。这种人中有极少数一小撮在死后会被称为伟大的艺术家，作品被无数富商追捧，卖到上千万上亿，被奉为经典。而在他们活着的时候，会被送进精神病院，一部分被改造好后和常人无异，另一部分没有被改造好死在某个角落里。</p>
<p>他们走到哪里都是病人。中国容不了他们，世界也容不了。也许他们唯一的价值就是去死，然后让人想起原来还有这么一个人，拍过这么一部电影。</p>
<p>当然，贾宏声还拍过很多正常的片子，比如《银蛇谋杀案》之类，在他还正常的时候，在一部正常的娱乐片中演了一个正常的变态杀手。这是网上能找到的仅有剧照。导演居然是李少红。</p>
<p>如果后来他没病，也许现在他会很有名，像当年他们那一代影视圈里的人，很多都成名成家了。他会继续演很多正常的片子，然后他再跳楼时，会比现在更惊哗——当然，他也不会再跳楼了。</p>
<p>《昨天》是我唯一看过的贾宏声的作品。他还拍过《苏州河》，我也看过，但我不认为那是他的作品。</p>
<p>《昨天》其实是张杨导演的，但我还是坚持认为，那是一部贾宏声的电影。</p>
<p>对张杨来说，那只是部电影，可以冠个《中国病人》的名字拿去参加国际电影节得奖，但对于贾宏声来说，那不是电影，他就是那个病人。有人能给他拍记录片去拿奖，却没有人能治好他。</p>
<p>张杨从来不下地狱，他拐个弯就上天堂了，他对我说，你下地狱就够了。</p>
<p>——贾宏声</p>
<p>贾宏声死了，大部分人都不知道他是谁。当天的新闻热点不是它，是韩寒的杂志，被无数人寄与“文学复兴”厚望而畅销的独唱团。看着贾宏声的照片，突然觉得他们其实有点像，同样带着和一切死磕的反社会姿态、同样被不齿者斥为装逼犯，但不同的是一个跳下去了，一个正走向声名与事业的顶峰。</p>
<p>韩寒很幸运，早生二十年，以他的叛逆，很可能也被父母强制改造，或因为考不上大学，而沦落在某个角落，到他四十岁的时候，大概也会长成这个样子，无人问津，被当成另类，瞪着双眼，要和这个社会死磕。</p>
<p>但他生活在一个商业的时代，他成为了一群人的代言人，并且这群人愿意为了他的代言而买他的书，让他致富。</p>
<p>同一时刻，觉得表演都是骗人的，耻于谈钱，不愿拍商业电影，于是被人遗忘的上一代愤青贾宏声孤独死去，在死后媒体介绍的也不是他的电影，而是和某些女星的绯闻。在网上搜索《昨天》，搜不到这部电影。如果不是他死去，人们也不会再想起这部电影。</p>
<p>四十三岁时的韩寒会是什么样，希望他那时不会孤独。</p>
<p>《独唱团》上市了，贾宏声死了。将来不会再有人迷恋列农，也很少再有人知道他和列宁的区别。那些迷着摇滚、写着诗歌，喝着啤酒，谈论着后现代主义，活在八十年代的人，有的上了天堂，有的下了地狱，他们的时代，已经消亡。</p>
<p>原文链接：<a href="https://movie.douban.com/review/3425047/">不要死
也不要孤独的生活（昨天）影评 (douban.com)</a></p>
<p>作者：今何在</p>
]]></content>
      <tags>
        <tag>影评</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 torch.nn.CrossEntropyLoss 的计算</title>
    <url>/2022/47935670.html</url>
    <content><![CDATA[<p>torch中计算损失函数时，会使用到名为 CrossEntropyLoss
的交叉熵损失函数，这个函数的公式为： <span class="math display">\[
\begin{aligned}
loss(x,class)&amp;=−log\frac{∑_jexp(x[j])}{exp(x[class])}\\
&amp;= −x[class] + log(∑_jexp(x[j]))
\end{aligned}
\]</span></p>
<span id="more"></span>
<p>class 表示该样本的分类，x[j] 表示预测函数的第 j
个输出，关于此公式的解释如下：</p>
<p>假设我们的预测函数的输出如下 <span class="math display">\[
[[0.0541, 0.1762, 0.9489 ], [−0.0288, −0.8072, 0.4909]]
\]</span> 假设我们的应该的分类如下 <span class="math display">\[
[0,2]
\]</span> 即第一个样本为类别class=0，第二个样本为类别class=2</p>
<p>那么 loss 函数则为： <span class="math display">\[
\begin{aligned}
\frac{e^{0.0541}}{e^{0.0541}+e^{0.1762}+e^{0.9489}}&amp;=0.2185\\
\frac{e^{0.4909}}{e^{-0.0288}+e^{-0.8072}+e^{0.4909}}&amp;=0.5354
\end{aligned}
\]</span> 然后计算log之后的相反数： <span class="math display">\[
\begin{aligned}
−\log(0.2185)&amp;=1.5210\\
−\log(0.5354)&amp;=0.6247
\end{aligned}
\]</span></p>
<p>取均值： <span class="math display">\[
\frac{1.5210+0.6247}{2}=1.073
\]</span></p>
<p>示例代码如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">loss_function <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
pred <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.0541</span><span class="token punctuation">,</span><span class="token number">0.1762</span><span class="token punctuation">,</span><span class="token number">0.9489</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.0288</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.8072</span><span class="token punctuation">,</span><span class="token number">0.4909</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
class_index <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int64<span class="token punctuation">)</span>
loss_value <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> class_index<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>loss_value<span class="token punctuation">)</span> <span class="token comment">##1.073</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>torch</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 this 指向的理解</title>
    <url>/2022/1449894788.html</url>
    <content><![CDATA[<h2 id="函数内-this-的指向">函数内 this 的指向</h2>
<p>这些 this 的指向，是当我们调用函数的时候确定的。
调用方式的不同决定了this 的指向不同一般指向我们的调用者. <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于%20this%20指向的理解/20220121145731.png"
alt="20220121145731" /> <span id="more"></span></p>
<h3 id="普通函数-this-指向window">1. 普通函数 this 指向window</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'普通函数的this'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
window<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="对象的方法-this指向的是对象-o">2. 对象的方法 this指向的是对象
o</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'对象方法的this:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
o<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3
id="构造函数-this-指向-ldh-这个实例对象-原型对象里面的this-指向的也是-ldh这个实例对象">3.
构造函数 this 指向 ldh 这个实例对象 原型对象里面的this 指向的也是
ldh这个实例对象</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">Star</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sing</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> ldh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="绑定事件函数-this-指向的是函数的调用者-btn这个按钮对象">4.
绑定事件函数 this 指向的是函数的调用者 btn这个按钮对象</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'绑定时间函数的this:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定时器函数-this-指向的也是window">5. 定时器函数 this
指向的也是window</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'定时器的this:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="立即执行函数-this还是指向window">6. 立即执行函数
this还是指向window</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'立即执行函数的this'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="改变函数内部-this-指向">改变函数内部 this 指向</h2>
<p>JavaScript 为我们专门提供了一些函数方法来帮我们更优雅的处理函数内部
this 的指向问题，常用的有 bind()、call()、apply() 三种方法。</p>
<h3 id="call-方法">1. call 方法</h3>
<p>call()
方法调用一个对象。简单理解为调用函数的方式，但是它可以改变函数的 this
指向。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>thisArg：在 fun 函数运行时指定的 this 值<br />
arg1，arg2：传递的其他参数<br />
返回值就是函数的返回值，因为它就是调用函数<br />
因此当我们想改变 this 指向，同时想调用这个函数的时候，可以使用
call，比如继承</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">'andy'</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// call 第一个可以调用函数 第二个可以改变函数内的this 指向</span>
<span class="token comment">// call 的主要作用可以实现继承</span>
<span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token parameter">uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>uname <span class="token operator">=</span> uname<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token parameter">uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Father</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> uname<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="apply-方法">2. apply 方法</h3>
<p>apply()
方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的 this
指向。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> <span class="token punctuation">[</span>argsArray<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>thisArg：在fun函数运行时指定的 this 值<br />
argsArray：传递的值，必须包含在数组里面<br />
返回值就是函数的返回值，因为它就是调用函数<br />
因此 apply 主要跟数组有关系，比如使用 Math.max() 求数组的最大值</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">'andy'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'pink'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'pink'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1. 也是调用函数 第二个可以改变函数内部的this指向</span>
<span class="token comment">// 2. 但是他的参数必须是数组(伪数组)</span>
<span class="token comment">// 3. apply 的主要应用 比如说可以利用 apply 借助于数学内置对象求数组最大值 </span>
<span class="token comment">// Math.max();</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// var max = Math.max.apply(null, arr);</span>
<span class="token keyword">var</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="bind-方法">3. bind 方法</h3>
<p>bind() 方法不会调用函数。但是能改变函数内部this 指向</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>thisArg：在 fun 函数运行时指定的 this 值<br />
arg1，arg2：传递的其他参数<br />
返回由指定的 this 值和初始化参数改造的原函数拷贝<br />
因此当我们只是想改变 this 指向，并且不想调用这个函数的时候，可以使用
bind</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">'andy'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1. 不会调用原来的函数   可以改变原来函数内部的this 指向</span>
<span class="token comment">// 2. 返回的是原函数改变this之后产生的新函数</span>
<span class="token comment">// 3. 如果有的函数我们不需要立即调用,但是又想改变这个函数内部的this指向此时用bind</span>
<span class="token comment">// 4. 我们有一个按钮,当我们点击了之后,就禁用这个按钮,3秒钟之后开启这个按钮</span>
<span class="token comment">// var btn1 = document.querySelector('button');</span>
<span class="token comment">// btn1.onclick = function() &#123;</span>
<span class="token comment">//     this.disabled = true; // 这个this 指向的是 btn 这个按钮</span>
<span class="token comment">//     // var that = this;</span>
<span class="token comment">//     setTimeout(function() &#123;</span>
<span class="token comment">//         // that.disabled = false; // 定时器函数里面的this 指向的是window</span>
<span class="token comment">//         this.disabled = false; // 此时定时器函数里面的this 指向的是btn</span>
<span class="token comment">//     &#125;.bind(this), 3000); // 这个this 指向的是btn 这个对象</span>
<span class="token comment">// &#125;</span>
<span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="call-apply-bind-总结">call apply bind 总结</h2>
<h3 id="相同点">相同点</h3>
<blockquote>
<p>都可以改变函数内部的this指向.</p>
</blockquote>
<h3 id="区别点">区别点</h3>
<blockquote>
<p>call 和 apply 会调用函数, 并且改变函数内部this指向.<br />
call 和 apply 传递的参数不一样, call 传递参数 aru1, aru2..形式 apply
必须数组形式[arg]<br />
bind 不会调用函数, 可以改变函数内部this指向.</p>
</blockquote>
<h3 id="主要应用场景">主要应用场景</h3>
<blockquote>
<p>call 经常做继承.<br />
apply 经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值<br />
bind 不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向.</p>
</blockquote>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 Couesrea 奖学金的申请</title>
    <url>/2022/719072326.html</url>
    <content><![CDATA[<blockquote>
<p><a
href="https://www.coursera.org/">Coursera</a>是免费大型公开在线课程项目，由美国斯坦福大学两名计算机科学教授创办。旨在同世界顶尖大学合作，在线提供免费的网络公开课程。Coursera的首批合作院校包括斯坦福大学、密歇根大学、普林斯顿大学、宾夕法尼亚大学等美国名校。
Coursera与另外1达成合作协议。其课程报名学生突破了150万，来自全球190多个国家和地区，而网站注册学生为68万。注册124门课程。目前新增的大学包括了佐治亚理工学院、杜克大学、华盛顿大学、加州理工学院、莱斯大学、爱丁堡大学、多伦多大学、洛桑联邦理工学院
-
洛桑（瑞士）、约翰·霍普金斯大学公共卫生学院、加州大学旧金山分校、伊利诺伊大学厄巴纳
- 香槟分校以及弗吉尼亚大学。</p>
</blockquote>
<p>除了免费课程之外还有一些付费性质的课程，但是也会有相应的课程福利，比如提供运算的服务器之类的。但是费用可能较为高。毕竟是学生嘛，Coursera也是提供了一套完整的助学金申请方案，可以用于助学金申请。</p>
<span id="more"></span>
<p>于是乎，就做了一个助学金申请模版</p>
<blockquote>
<p>I am very interested in this course. I believe that this course can
effectively help me in the field of biochemistry and make my
professional skills about the biology more perfect. However, since I am
now a full-time student who does not have a job, I can't afford the
extra monthly study fee by relying on scholarships and daily part-time
tuition and living expenses. I believe I will graduate with a bachelor's
degree from . The ability to learn, adapt, communicate, and organize is
excellent. I believe that there will be achievements in society in the
future. I have also been actively repaying the society. I have
volunteered for a year in the Women and Children's Hospital to
participate in the rehabilitation of autistic angels. I also actively
participate in various educational activities. I am determined to
complete this course, so I hope I can get the this opportunity to
learn.</p>
</blockquote>
<hr />
<blockquote>
<p>I am a student majoring in biochemistry, the course involves
biochemistry, molecular biology, etc., and there is also relevant
content of chemical analysis. During the learning process, I gradually
discovered the need to dig deep into biological related issues, which
can help biologist understand the mystery of living things and
experience a different biological world. And this course can help me
start with basic biological knowledge, better handle biotechnology and
analyze trends through biological research. In addition, biochemistry
has gradually become a must-have skill in biology-related job
requirements. After studying this course, I can better enrich my
professional skills and become a professional with not only theoretical
knowledge but also operational ability. I hope that after graduation, I
can find a career related to biology, mainly in biochemistry and
molecular biology. I hope that when I choose products and publicity
channels, I can use this course to know trends and predict trends.</p>
</blockquote>
<hr />
<blockquote>
<p>I am completely independent from home now, without any economic
income. Scholarships and part-time income sometimes cannot even meet
daily needs, and I have plans to continue my Bachelor degree, and I
expect that my income will not be high in the next four years.</p>
<p>I hope that I can give back to the website through my good things,
such as promoting the coursera on the website, forums and other
platforms, through my excellent results word of mouth marketing.</p>
</blockquote>
<p>以上。</p>
]]></content>
      <tags>
        <tag>Coursera</tag>
      </tags>
  </entry>
  <entry>
    <title>关于npm和yarn</title>
    <url>/2022/3868603507.html</url>
    <content><![CDATA[<h2 id="什么是-npm">什么是 NPM</h2>
<ul>
<li>NPM（全称Node Package Manager，即node包管理器）<br />
</li>
<li>是Node.js默认的、以JavaScript编写的软件包管理系统</li>
<li>npm 来分享和使用代码已经成了前端的标配</li>
<li>官网： <a href="https://www.npmjs.com"
class="uri">https://www.npmjs.com</a></li>
<li>npm被全球超过1100万开发人员所依赖</li>
<li>拥有超过一百万个软件包，是世界上最大的软件注册表 <img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于npm和yarn/20220126175706.png"
alt="20220126175706" /></li>
</ul>
<span id="more"></span>
<h2 id="安装npm">安装NPM</h2>
<ul>
<li>npm是Node.js默认的软件包管理系统</li>
<li>安装完毕node后，会默认安装好npm</li>
<li>npm本身也是基于Node.js开发的软件</li>
<li>下载Node: <a href="http://nodejs.cn"
class="uri">http://nodejs.cn</a></li>
</ul>
<h2 id="npm-的使用">NPM 的使用</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> -v   
<span class="token comment">#通过查看版本，看npm是否安装成功</span>

<span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>Module Name<span class="token operator">></span>      
<span class="token comment">#使用 npm 命令安装模块</span>

<span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>Module Name<span class="token operator">></span> -g   
<span class="token comment">#可以直接在命令行里使用</span>

<span class="token function">npm</span> list -g  
<span class="token comment">#查看所有全局安装的模块</span>

<span class="token function">npm</span> list vue 
<span class="token comment">#查看某个模块的版本号</span>

<span class="token function">npm</span> -g <span class="token function">install</span> npm@5.9.1  
<span class="token comment">#（@后跟版本号）这样我们就可以更新npm版本</span>

<span class="token function">npm</span> <span class="token function">install</span> -save moduleName         
<span class="token comment"># -save 在package文件的dependencies节点写入依赖。</span>

<span class="token function">npm</span> <span class="token function">install</span> -save-dev moduleName  
<span class="token comment"># -save-dev 在package文件的devDependencies节点写入依赖dependencies：运行时的依赖，发布后，即生产环境下还需要用的模块</span>
<span class="token comment"># devDependencies：开发时的依赖。里面的模块是开发时用的，发布时用不到它,比如项目中使用的 gulp ，压缩css、js的模块。这些模块在我们的项目部署后是不需要的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="npm-镜像的设置与查看">NPM 镜像的设置与查看</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#搭建环境时通过如下代码将npm设置成淘宝镜像</span>
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org --global
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> disturl https://npm.taobao.org/dist --global

<span class="token comment">#设置当前地址（设置为默认地址）</span>
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmjs.org/

<span class="token comment">#查看镜像的配置结果</span>
<span class="token function">npm</span> config get registry 
<span class="token function">npm</span> config get disturl  

<span class="token comment">#使用nrm工具切换淘宝源</span>
npx nrm use taobao

<span class="token comment">#如果之后需要切换回官方源可使用</span>
npx nrm use <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="package.json-属性说明">Package.json 属性说明</h2>
<blockquote>
<p>name - 包名。<br />
version - 包的版本号。<br />
description - 包的描述。<br />
homepage - 包的官网 url 。<br />
author - 包的作者姓名。<br />
contributors - 包的其他贡献者姓名。<br />
dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在
node_module 目录下。<br />
repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github
上。<br />
main - main 字段指定了程序的主入口文件，require('moduleName')
就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。<br />
keywords - 关键字</p>
</blockquote>
<h2 id="npm-常用命令">NPM 常用命令</h2>
<p>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。
使用npm help &lt;command&gt;可查看某条命令的详细帮助，例如npm help
install。 在package.json所在目录下使用npm install .
-g可先在本地安装当前命令行程序，可用于发布前的本地测试。 使用npm update
&lt;package&gt;可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。
使用npm update &lt;package&gt;
-g可以把全局安装的对应命令行程序更新至最新版。 使用npm cache
clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。
使用npm unpublish
&lt;package&gt;@&lt;version&gt;可以撤销发布自己发布过的某个版本代码。</p>
<h2 id="包的使用">包的使用</h2>
<ul>
<li>通过命令行使用 npm 下载和更新包</li>
<li>没有webpack之前搜寻整个 node_modules
目录来定位每个包的路径再手动添加到我们 HTML
文件中（实在太太不方便了）</li>
<li>大多数编程语言都会提供从一个文件导入另一个文件代码的机制。然而
JavaScript 最初设计时并没有这个特性，因为 JavaScript
原本是为了在浏览器端运行而设计的，并没有权限获取计算机客户端的文件系统（安全考虑）。所以很长一段时间以来，组织多个文件的
JavaScript 代码就是把每个文件下载下来，变量是全局共享的。</li>
<li>CommonJS 中很大的一部分便是对模块系统的规范，</li>
<li>使用require语句导入包</li>
<li>新的ES6可以使用import导入包</li>
</ul>
<h2 id="什么是-yarn">什么是 Yarn</h2>
<p>“Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS
包管理工具 ，正如官方文档中写的，Yarn 是为了弥补 npm
的一些缺陷而出现的。因为NPM5以下会出现下面的问题：</p>
<ul>
<li>npm
install的时候巨慢。特别是新的项目拉下来要等半天，删除node_modules，重新install的时候依旧如此。</li>
<li>同一个项目，多人开发时，由于安装的版本不一致出现bug</li>
</ul>
<p>官网：www.yarnpkg.com</p>
<h2 id="yarn-的安装">Yarn 的安装</h2>
<p>下载node.js，使用npm安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g <span class="token function">yarn</span>
<span class="token function">yarn</span> --version <span class="token comment">#查看版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>安装node.js，下载yarn的安装程序:
提供一个.msi文件，在运行时将引导您在Windows上安装Yarn</p>
<p>Yarn 淘宝源安装，分别复制粘贴以下代码行到黑窗口运行即可</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org -g
<span class="token function">yarn</span> config <span class="token builtin class-name">set</span> sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="yarn-的基本使用">Yarn 的基本使用</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> init                                  <span class="token comment">#初始化项目   同npm init，执行输入信息后，会生成package.json文件</span>
<span class="token function">yarn</span> <span class="token function">install</span>                     <span class="token comment">#安装package.json里所有包，并将包及它的所有依赖项保存进yarn.lock</span>
<span class="token function">yarn</span> <span class="token function">install</span> --flat         <span class="token comment">#安装一个包的单一版本</span>
<span class="token function">yarn</span> <span class="token function">install</span> --force   <span class="token comment">#强制重新下载所有包</span>
<span class="token function">yarn</span> <span class="token function">install</span> --production  <span class="token comment">#只安装dependencies里的包</span>
<span class="token function">yarn</span> <span class="token function">install</span> --no-lockfile  <span class="token comment">#不读取或生成yarn.lock</span>
<span class="token function">yarn</span> <span class="token function">install</span> --pure-lockfile  <span class="token comment">#不生成yarn.lock</span>
<span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>  <span class="token comment"># 在当前的项目中添加一个依赖包，会自动更新到package.json和yarn.lock文件中</span>
<span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>version<span class="token punctuation">]</span> <span class="token comment"># 安装指定版本，这里指的是主要版本，如果需要精确到小版本，使用-E参数</span>
<span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>tag<span class="token punctuation">]</span>  <span class="token comment"># 安装某个tag（比如beta,next或者latest）</span>
<span class="token function">yarn</span> <span class="token function">add</span> --dev/-D   <span class="token comment"># 加到 devDependencies</span>
<span class="token function">yarn</span> <span class="token function">add</span> --peer/-P   <span class="token comment"># 加到 peerDependencies</span>
<span class="token function">yarn</span> <span class="token function">add</span> --optional/-O  <span class="token comment"># 加到 optionalDependencies</span>

<span class="token comment">#默认安装包的主要版本里的最新版本，下面两个命令可以指定版本：</span>

<span class="token function">yarn</span> <span class="token function">add</span> --exact/-E   <span class="token comment"># 安装包的精确版本。例如yarn add foo@1.2.3会接受1.9.1版，但是yarn add foo@1.2.3 --exact只会接受1.2.3版</span>
<span class="token function">yarn</span> <span class="token function">add</span> --tilde/-T   <span class="token comment"># 安装包的次要版本里的最新版。例如yarn add foo@1.2.3 --tilde会接受1.2.9，但不接受1.3.0</span>
<span class="token function">yarn</span> publish  <span class="token comment">#发布包</span>
<span class="token function">yarn</span> remove <span class="token operator">&lt;</span>packageName<span class="token operator">></span>  <span class="token comment">#移除一个包，会自动更新package.json和yarn.lock</span>
<span class="token function">yarn</span> upgrade <span class="token comment"># 更新一个依赖 用于更新包到基于规范范围的最新版本</span>
<span class="token function">yarn</span> run <span class="token comment"># 运行脚本 用来执行在 package.json 中 scripts 属性下定义的脚本</span>
<span class="token function">yarn</span> info <span class="token operator">&lt;</span>packageName<span class="token operator">></span> <span class="token comment"># 显示某个包的信息 可以用来查看某个模块的最新版本信息</span>
<span class="token function">yarn</span> cache      <span class="token comment"># 缓存</span>
<span class="token function">yarn</span> cache list       <span class="token comment"># 列出已缓存的每个包 </span>
<span class="token function">yarn</span> cache <span class="token function">dir</span>   <span class="token comment"># 返回 全局缓存位置</span>
<span class="token function">yarn</span> cache clean  <span class="token comment"># 清除缓存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="yarn-的优点">Yarn 的优点</h2>
<p>速度快 安装版本统一 更简洁的输出 多注册来源处理 更好的语义化</p>
<h2 id="npm-与-yarn-的比对">NPM 与 Yarn 的比对</h2>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/关于npm和yarn/20220126181427.png"
alt="20220126181427" /></p>
]]></content>
      <tags>
        <tag>npm</tag>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Git</title>
    <url>/2022/3494410286.html</url>
    <content><![CDATA[<h2 id="版本控制">版本控制</h2>
<blockquote>
<p>版本控制（Revision
control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p>
</blockquote>
<ul>
<li>实现跨区域多人协同开发</li>
<li>追踪和记载一个或者多个文件的历史记录</li>
<li>组织和保护你的源代码和文档</li>
<li>统计工作量</li>
<li>并行开发、提高开发效率</li>
<li>跟踪记录整个软件的开发过程</li>
<li>减轻开发人员的负担，节省时间，同时降低人为错误</li>
</ul>
<p>简单说就是用于管理多人协同开发项目的技术。 <span id="more"></span>
没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p>
<p>无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具！</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220123191030.png"
alt="20220123191030" /></p>
<blockquote>
<p>常见的版本控制工具</p>
</blockquote>
<p>主流的版本控制器有如下这些：</p>
<ul>
<li>Git</li>
<li>SVN（Subversion）</li>
<li>CVS（Concurrent Versions System）</li>
<li>VSS（Microsoft Visual SourceSafe）</li>
<li>TFS（Team Foundation Server）</li>
<li>Visual Studio Online</li>
</ul>
<p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision
Control System）、Serena
Dimensions、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear
Vault），现在影响力最大且使用最广泛的是Git与SVN</p>
<h3 id="版本控制分类">版本控制分类</h3>
<h4 id="本地版本控制">1、本地版本控制</h4>
<p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220123191654.png"
alt="20220123191654" /> 图片</p>
<h4 id="集中版本控制-svn">2、集中版本控制 SVN</h4>
<p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220123192220.png"
alt="20220123192220" /></p>
<p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p>
<h4 id="分布式版本控制-git">3、分布式版本控制 Git</h4>
<p>每个人都拥有全部的代码，具有安全隐患。</p>
<p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。
不会因为服务器损坏或者网络问题，造成不能工作的情况！</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220123192640.png"
alt="20220123192640" /></p>
<h4 id="git与svn的主要区别">Git与SVN的主要区别</h4>
<p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220123192819.png"
alt="20220123192819" /></p>
<p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件。</p>
<p>Git是目前世界上最先进的分布式版本控制系统。</p>
<h2 id="git的历史">Git的历史</h2>
<p>同生活中的许多伟大事物一样，Git
诞生于一个极富纷争大举创新的年代。</p>
<p>Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux
内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991－2002年间)。到
2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper
来管理和维护代码。</p>
<p>Linux社区中存在很多的大佬！破解研究 BitKeeper ！</p>
<p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux
内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper
的权力。这就迫使 Linux 开源社区(特别是 Linux 的缔造者 Linus
Torvalds)基于使用 BitKeeper
时的经验教训，开发出自己的版本系统。（2周左右！） 也就是后来的 Git。</p>
<p><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p>
<p>Git是免费、开源的，最初Git是为辅助 Linux 内核开发的，来替代
BitKeeper！</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220123192959.png"
alt="20220123192959" /></p>
<p>Linux和Git之父李纳斯·托沃兹（Linus Benedict Torvalds）1969、芬兰</p>
<h2 id="git环境配置">Git环境配置</h2>
<h3 id="软件下载">软件下载</h3>
<p>打开 <a
href="https://git-scm.com/">Git官网</a>，下载Git对应操作系统的版本。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/图片.png"
alt="图片" /></p>
<p>下载对应的版本即可安装。</p>
<h3 id="启动git">启动Git</h3>
<p>安装成功后在开始菜单中会有Git项，菜单下有3个程序：任意文件夹下右键也可以看到对应的程序！</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220123194614.png"
alt="20220123194614" /></p>
<p><strong>Git
Bash</strong>：Unix与Linux风格的命令行，使用最多，推荐最多</p>
<p><strong>Git CMD</strong>：Windows风格的命令行</p>
<p><strong>Git
GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p>
<h3 id="常用的linux命令">常用的Linux命令</h3>
<blockquote>
<p>1）、cd : 改变目录。<br />
2）、cd . . 回退到上一个目录，直接cd进入默认目录<br />
3）、pwd : 显示当前所在的目录路径。<br />
4）、ls(ll):
都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。<br />
5）、touch : 新建一个文件 如 touch index.js
就会在当前目录下新建一个index.js文件。<br />
6）、rm: 删除一个文件, rm index.js 就会把index.js文件删除。<br />
7）、mkdir: 新建一个目录,就是新建一个文件夹。<br />
8）、rm -r : 删除一个文件夹, rm -r src 删除src目录，rm -rf /
切勿在Linux中尝试！删除电脑中全部文件！<br />
9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src
是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。<br />
10）、reset 重新初始化终端/清屏。<br />
11）、clear 清屏。<br />
12）、history 查看命令历史。<br />
13）、help 帮助。<br />
14）、exit 退出。<br />
15）、#表示注释</p>
</blockquote>
<h3 id="git配置">Git配置</h3>
<p>所有的配置文件，其实都保存在本地！</p>
<p>查看配置 git config -l</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220123195605.png"
alt="20220123195605" /></p>
<p>查看不同级别的配置文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看系统config</span>
<span class="token function">git</span> config --system --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220123195715.png"
alt="20220123195715" /></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看当前用户（global）配置</span>
<span class="token function">git</span> config --global  --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220123195901.png"
alt="20220123195901" /></p>
<h3 id="git相关的配置文件">Git相关的配置文件</h3>
<p>1）、Git：Git 安装目录下的 gitconfig --system 系统级</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220124103424.png"
alt="20220124103424" /></p>
<p>2）、C: .gitconfig 只适用于当前登录用户的配置 --global 全局</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220124103604.png"
alt="20220124103604" /></p>
<p>这里可以直接编辑配置文件，通过命令设置后会响应到这里。</p>
<p>设置用户名与邮箱（用户标识，必要）
当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"zepoch"</span>  <span class="token comment">#名称</span>
<span class="token function">git</span> config --global user.email <span class="token number">1654306546</span>@qq.com   <span class="token comment">#邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>只需要做一次这个设置，如果你传递了--global
选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要--global选项。总之--global为全局配置，不加为某个项目的特定配置。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220124103901.png"
alt="20220124103901" /></p>
<h2 id="git基本理论重要">Git基本理论（重要）</h2>
<h3 id="三个区域">三个区域</h3>
<p>Git本地有三个工作区域：工作目录（Working
Directory）、暂存区(Stage/Index)、资源库(Repository或Git
Directory)。如果在加上远程的git仓库(Remote
Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220124104259.png"
alt="20220124104259" /></p>
<ul>
<li>Workspace：工作区，就是你平时存放项目代码的地方<br />
</li>
<li>Index /
Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息<br />
</li>
<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本<br />
</li>
<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>
</ul>
<p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220124104818.png"
alt="20220124104818" /></p>
<ul>
<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。<br />
</li>
<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。<br />
</li>
<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。<br />
</li>
<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。<br />
</li>
<li>Local
Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。<br />
</li>
<li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li>
</ul>
<h3 id="工作流程">工作流程</h3>
<p>git的工作流程一般是这样的：</p>
<p>1、在工作目录中添加、修改文件；</p>
<p>2、将需要进行版本管理的文件放入暂存区域；</p>
<p>3、将暂存区域的文件提交到git仓库。</p>
<p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220124105100.png"
alt="20220124105100" /></p>
<h2 id="git项目搭建">Git项目搭建</h2>
<h3 id="创建工作目录与常用指令">创建工作目录与常用指令</h3>
<p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p>
<p>日常使用只要记住下图6个命令：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220124153928.png"
alt="20220124153928" /></p>
<h3 id="本地仓库搭建">本地仓库搭建</h3>
<p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p>
<p>1、创建全新的仓库，需要用GIT管理的项目的根目录执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在当前目录新建一个Git代码库</span>
$ <span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>2、执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。</p>
<h3 id="克隆远程仓库">克隆远程仓库</h3>
<p>1、另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地！</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#克隆一个项目和它的整个代码历史(版本信息)</span>
$ <span class="token function">git</span> clone <span class="token punctuation">[</span>url<span class="token punctuation">]</span>  <span class="token comment"># &lt;https://gitee.com/kuangstudy/openclass.git></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>2、去 gitee 或者 github 上克隆一个测试！</p>
<h2 id="git文件操作">Git文件操作</h2>
<h3 id="文件的四种状态">文件的四种状态</h3>
<p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p>
<ul>
<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库,
不参与版本控制. 通过 <strong>git add</strong> 状态变为
<strong>Staged</strong>.<br />
</li>
<li>Unmodify: 文件已经入库, 未修改,
即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处,
如果它被修改, 而变为 <strong>Modified</strong>. 如果使用 <strong>git
rm</strong> 移出版本库, 则成为 <strong>Untracked</strong> 文件<br />
</li>
<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作.
这个文件也有两个去处, 通过 <strong>git add</strong> 可进入暂存
<strong>staged</strong> 状态, 使用 <strong>git checkout</strong>
则丢弃修改过, 返回到 <strong>unmodify</strong> 状态, 这个 <strong>git
checkout</strong> 即从库中取出文件, 覆盖当前修改 !</li>
<li>Staged: 暂存状态. 执行 <strong>git commit</strong>
则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为
<strong>Unmodify</strong> 状态. 执行 <strong>git reset HEAD
filename</strong> 取消暂存, 文件状态为 <strong>Modified</strong></li>
</ul>
<h3 id="查看文件状态">查看文件状态</h3>
<p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看指定文件状态</span>
<span class="token function">git</span> status <span class="token punctuation">[</span>filename<span class="token punctuation">]</span>

<span class="token comment">#查看所有文件状态</span>
<span class="token function">git</span> status

<span class="token comment"># git add .                  添加所有文件到暂存区</span>

<span class="token comment"># git commit -m "消息内容"    提交暂存区中的内容到本地仓库 -m 提交信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="忽略文件">忽略文件</h3>
<p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p>
<p>在主目录下建立".gitignore"文件，此文件有如下规则：</p>
<ol type="1">
<li><p>忽略文件中的空行或以井号（#）开始的行将会被忽略。</p></li>
<li><p>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,...}）代表可选的字符串等。</p></li>
<li><p>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</p></li>
<li><p>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</p></li>
<li><p>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</p>
<p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 为注释</span>
*.txt        <span class="token comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span>
<span class="token operator">!</span>lib.txt     <span class="token comment">#但lib.txt除外</span>
/temp        <span class="token comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span>
build/       <span class="token comment">#忽略build/目录下的所有文件</span>
doc/*.txt    <span class="token comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li>
</ol>
<h2 id="使用码云">使用码云</h2>
<ol type="1">
<li><p>注册登录码云，完善个人信息<br />
</p></li>
<li><p>设置本机绑定SSH公钥，实现免密码登录</p>
<p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入 C:\Users\Administrator\.ssh 目录</span>

<span class="token comment"># 生成公钥</span>

$ ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220124162203.png"
alt="20220124162203" /></p></li>
<li><p>将公钥信息public key 添加到码云账户中即可。<br />
</p></li>
<li><p>使用码云创建一个自己的仓库。</p></li>
<li><p>许可证：开源是否可以随意转载，开源但是不能商业使用，不能转载，...</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220124161637.png"
alt="20220124161637" /></p></li>
</ol>
<h2 id="说明git分支">说明：GIT分支</h2>
<p>分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/关于Git/20220124163332.png"
alt="20220124163332" /></p>
<p>git分支中常用指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token comment"># 列出所有本地分支</span>
$ <span class="token function">git</span> branch

<span class="token comment"># 列出所有远程分支</span>
$ <span class="token function">git</span> branch -r

<span class="token comment"># 新建一个分支，但依然停留在当前分支</span>
$ <span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>

<span class="token comment"># 新建一个分支，并切换到该分支</span>
$ <span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>

<span class="token comment"># 合并指定分支到当前分支</span>
$ <span class="token function">git</span> merge <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>

<span class="token comment"># 删除分支</span>
$ <span class="token function">git</span> branch -d <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>

<span class="token comment"># 删除远程分支</span>
$ <span class="token function">git</span> push origin --delete <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>
$ <span class="token function">git</span> branch -dr <span class="token punctuation">[</span>remote/branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交。选择要保留他的代码还是你的代码。</p>
<p>main
主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的
dev
分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支
main 上来。</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 pandoc exited with code null 的解决方案</title>
    <url>/2022/2213706848.html</url>
    <content><![CDATA[<p>今天在写博客的时候，渲染的时候发生了一些问题，主要报错如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span><span class="token punctuation">[</span>hexo-renderer-pandoc<span class="token punctuation">]</span> pandoc exited with code null.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>看了一些博主的方案，也进行了尝试，但是结果并不是很好，但是自己经过摸索还是解决了，便是来写一下相关的解决方案。</p>
<span id="more"></span>
<p>第一种是将 <code>hexo-renderer-pandoc</code> 卸载</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> remove --save hexo-renderer-pandoc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>但是呢，卸载之后，hexo 的渲染器就需要重新装配，不符合我的需求。</p>
<p>第二种则是在 Linux 之下的的一个官方的<a
href="https://github.com/pandoc/pandoc-action-example#simple-usage">解决方法</a>：</p>
<pre class="line-numbers language-none"><code class="language-none">name: Simple Usage

on: push

jobs:
  convert_via_pandoc:
    runs-on: ubuntu-18.04
    steps:
      - uses: docker:&#x2F;&#x2F;pandoc&#x2F;core:2.9
        with:
          args: &quot;--help&quot; # gets appended to pandoc command<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第三种就是我大概摸索到的一个方法，即下载
<code>pandoc</code>，因为我是 windows，然后 push 到 github
进行部署的。下载地址如下： <a
href="https://github.com/jgm/pandoc/releases">Releases · jgm/pandoc
(github.com)</a></p>
<p>安装之后重新开启命令行进行部署即可。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>关于高级事件和 BOM 浏览器对象类型</title>
    <url>/2022/257512457.html</url>
    <content><![CDATA[<h1 id="高级事件">高级事件</h1>
<h2 id="注册事件">注册事件</h2>
<ul>
<li>给元素添加事件成为注册事件或者绑定事件</li>
<li><h3 id="传统方式和方法监听注册方式">传统方式和方法监听注册方式</h3>
<ul>
<li><h4 id="传统注册">传统注册</h4>
<ul>
<li>利用 on 开头的事件 onclick</li>
</ul>
<p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;button onclick = alert("hi~")><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>
<ul>
<li><p>特点：注册事件的唯一性</p></li>
<li><p>同一元素同一事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</p>
<span id="more"></span></li>
</ul></li>
<li><h4 id="方法监听注册方式">方法监听注册方式</h4>
<ul>
<li><p>w3c 标准 推荐方式</p></li>
<li><p>addEventListener() 是一个方法</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> listener<span class="token punctuation">[</span><span class="token punctuation">,</span> useCapture<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><p>type 事件类型字符串，比如click mouseover
注意这里不要带on</p></li>
<li><p>listener 事件处理函数，事件发生时，会调用该监听函数</p></li>
<li><p>可选参数，是一个布尔值，默认是false</p></li>
<li><p>attachEvent 事件监听方式</p>
<ul>
<li>ie9 之前的版本支持</li>
<li>生产版本一般不使用</li>
</ul></li>
</ul></li>
<li><p>IE9 之前的 IE 不支持此方法</p></li>
<li><p>同一个元素同一个事件可以注册多个监听器</p></li>
<li><p>按注册顺序依次执行</p></li>
</ul></li>
</ul></li>
<li><h3 id="注册事件兼容性解决方法">注册事件兼容性解决方法</h3>
<ul>
<li>先照顾大多数浏览器，再处理特殊浏览器</li>
</ul></li>
</ul>
<h2 id="删除事件-解绑事件">删除事件 解绑事件</h2>
<ul>
<li><h3 id="删除事件的方式">删除事件的方式</h3>
<ul>
<li><h4 id="传统注册方式">传统注册方式</h4>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eventTarget<span class="token punctuation">.</span>onclock <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><h4 id="方法监听注册方式-1">方法监听注册方式</h4>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eventTarget<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> listener<span class="token punctuation">[</span><span class="token punctuation">,</span> useCapture<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">eventTarget<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span>eventNameWithOn<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ul></li>
<li>删除事件的兼容性解决方案</li>
</ul>
<h2 id="dom-事件流">DOM 事件流</h2>
<ul>
<li>描述的是从页面中接收事件的顺序</li>
<li>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流</li>
<li><h3 id="三个阶段">三个阶段</h3>
<ul>
<li>捕获阶段</li>
<li>当前目标阶段</li>
<li>冒泡阶段</li>
</ul></li>
<li><h3 id="注意事项">注意事项</h3>
<ul>
<li>js 代码中只能执行捕获或者冒泡其中的一个阶段‘</li>
<li>onclick 和 attachEvent 只能得到冒泡阶段</li>
<li>addEventListener(type, listener[, useCapture])
第三个参数如果是true，表示在事件捕获阶段调用事件处理程序；如果是false（不写默认就是false），表示在冒泡阶段调用事件处理程序</li>
</ul></li>
</ul>
<h2 id="事件对象">事件对象</h2>
<ul>
<li>event即为一个事件对象，可看作为一个形参</li>
<li>事件对象只有有了事件才会存在，是系统创建的，不需要传递参数</li>
<li>事件对象是我们事件的一系列相关数据的集合 跟事件相关的
比如鼠标点击里面就包含了鼠标的相关信息</li>
<li>事件对象可以自己命名，比如 event ent 等等</li>
<li>事件对象的兼容性问题 ie 678 通过 window.event</li>
<li><h3 id="事件对象的常见属性和方法">事件对象的常见属性和方法</h3>
<ul>
<li><p>e.target</p>
<ul>
<li>返回触发事件的对象 标准</li>
</ul></li>
<li><p>e.srcElement</p>
<ul>
<li>返回触发事件的对象 非标准</li>
</ul></li>
<li><p>e.type</p>
<ul>
<li>返回事件的类型 比如 click mouseover 不带 on</li>
</ul></li>
<li><p>e.cancelBubble</p>
<ul>
<li>该属性阻止冒泡 非标准 ie6-8 使用</li>
</ul></li>
<li><p>e.returnValue</p>
<ul>
<li>该属性阻止默认事件（默认行为） 非标准 ie6-8 使用
比如不让链接跳转</li>
</ul></li>
<li><p>e.preventDefault()</p>
<ul>
<li>该方法阻止默认事件（默认行为） 标准 比如不让跳转</li>
</ul></li>
<li><p>e.stopPropagation()</p>
<ul>
<li>阻止冒泡</li>
</ul></li>
</ul></li>
</ul>
<h2 id="阻止冒泡事件">阻止冒泡事件</h2>
<ul>
<li><p>阻止事件冒泡的两种方式</p>
<ul>
<li><p>事件冒泡：开始时由最具体的元素接受，然后逐级向上传播到 DOM
最顶层节点</p></li>
<li><p>标准写法</p>
<ul>
<li>利用事件对象里面的 stopPropagation() 方法</li>
</ul></li>
<li><p>非标准写法</p>
<ul>
<li>IE6-8 利用事件对象 cancelBubble 属性</li>
</ul></li>
</ul></li>
</ul>
<h2 id="事件委托">事件委托</h2>
<ul>
<li>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。生活中有如下场景</li>
<li>咱们班有100个学生，快递员有100个快递，如果一个个的送花费时间较长。同时每个学生领取的时候，也需要排队领取，也花费时间较长，何如？</li>
</ul>
<p>解决方案∶快递员把10个快递，委托给班主任，班主任把这些快递放到办公室，同学们下课自行领取即可。</p>
<p>优势︰快递员省事，委托给班主任就可以走了。同学们领取也方便，因为相信班主任。</p>
<ul>
<li><p>事件委托又称事件代理，在jQuery 里面成为事件委派</p>
<ul>
<li><p>事件委托的原理</p>
<ul>
<li>不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点。</li>
</ul></li>
</ul></li>
<li><p>事件委托的作用</p>
<p>我们只操作了一次 DOM，提高了程序的性能</p></li>
</ul>
<h2 id="常用的鼠标事件">常用的鼠标事件</h2>
<h3 id="常用的鼠标事件-1">常用的鼠标事件</h3>
<ul>
<li><h4 id="禁止使用鼠标右键菜单">禁止使用鼠标右键菜单</h4>
<ul>
<li>contextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</li>
</ul>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"contextmenu"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>	
	e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li>
<li><h4 id="禁止鼠标选中">禁止鼠标选中</h4>
<p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"selectstart"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li>
<li><h4 id="鼠标事件对象">鼠标事件对象</h4>
<ul>
<li><p>event
对象代表事件的状态，跟事件相关的一系列信息的集合。现阶段我们主要是用鼠标事件对象
MouseEvent 和键盘事件对象 KeyboardEvent。</p></li>
<li><p>e.clientX: 返回鼠标相对于浏览器窗口可视区的 X 坐标</p></li>
<li><p>e.clientY: 返回鼠标相对于浏览器窗口可视区的 Y 坐标</p></li>
<li><p>e.pageX: 返回鼠标相对于文档页面的 X 坐标 ID9+ 支持</p></li>
<li><p>e.pageY: 返回鼠标相对于文档页面的 Y 坐标 ID9+ 支持</p></li>
<li><p>e.screenX: 返回鼠标相对于电脑屏幕的 X 坐标</p></li>
<li><p>e.screenY: 返回鼠标相对于电脑屏幕的 Y 坐标</p></li>
<li><p>案例：移动的天使</p>
<ul>
<li>鼠标不断的移动，使用鼠标移动事件：mousemove - 在页面中移动，给
document 注册事件
<ul>
<li>图片要移动距离，而且不占位置，我们使用绝对定位即可</li>
<li>核心原理∶每次鼠标移动，我们都会获得最新的鼠标坐标，把这个x和y坐标做为图片的top和left值就可以移动圄片
## 常用的键盘事件</li>
</ul></li>
</ul></li>
</ul></li>
<li><p>onkeyup: 某个键盘按键被松开时触发</p></li>
<li><p>onkeydown: 某个键盘按键被按下时触发</p></li>
<li><p>onkeypress: 某个键盘案件被按下时触发 但是它不识别功能键 比如 ctrl
shift 箭头等</p></li>
<li><p>键盘事件对象</p></li>
<li><p>ASCII 表</p>
<ul>
<li><p>keyCode</p></li>
<li><p>keyup和keydown 事件不区分字母大小写 a 和 A 得到的都是 65</p></li>
<li><p>keypress 事件 区分字母大小写</p></li>
<li><p>案例</p>
<ul>
<li><p>按下 s 使得文本框获得焦点</p></li>
<li><p>模拟京东快递单号查询单号</p>
<ul>
<li>注意：keydown 和 keypress
在文本框里面的特点：他们两个事件触发的时候，文字还没有落入文本框中</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<h1 id="bom-浏览器对象类型">BOM 浏览器对象类型</h1>
<h2 id="bom-概述">BOM 概述</h2>
<h3 id="什么是-bom">什么是 BOM</h3>
<ul>
<li>BOM（Browser Object Model）
即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是
window</li>
<li>BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性</li>
<li>BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是
W3C，BOM 最初是 Netscape 浏览器标准的一部分。</li>
</ul>
<h3 id="bom-的构成">BOM 的构成</h3>
<ul>
<li><h4 id="bom-比-dom-更大它包含-dom">BOM 比 DOM 更大，它包含
DOM。</h4></li>
<li><h4 id="window-对象是浏览器的顶级对象它具有双重角色">window
对象是浏览器的顶级对象，它具有双重角色。</h4>
<ul>
<li>它是 JS 访问浏览器窗口的一个接口。</li>
<li>它是一个全局对象。定义在全局作用域中的变量、函数都会变成window对象的属性和方法</li>
<li>在调用的时候可以省略
window，前面学习的对话框都属于window对象方法，如
alert()、prompt()等</li>
<li>注意：window下的一个特殊属性 window.name</li>
</ul></li>
<li><h4 id="window-对象的常见事件">window 对象的常见事件</h4>
<ul>
<li><h5 id="onload">onload</h5>
<ul>
<li>最好使用addEventListener</li>
</ul></li>
<li><h5 id="窗口加载事件">窗口加载事件</h5>
<ul>
<li><p>document.addEventListener('DOMContentLoaded',function(){})</p>
<ul>
<li>DOMContentLoaded 事件触发时，当且仅当 DOM
加载完成，不包括样式表，图片，flash等</li>
</ul></li>
</ul></li>
<li><h5 id="调整窗口大小事件">调整窗口大小事件</h5>
<ul>
<li>resize</li>
</ul></li>
</ul></li>
<li><h4 id="定时器">定时器</h4>
<ul>
<li><h5 id="两种定时器">两种定时器</h5>
<ul>
<li><p>setTimeout()</p>
<ul>
<li>setTimeout(调用函数, [延迟的毫秒数])</li>
<li>setTimeout()
方法用于设置一个定时器，该定时器在定时器到期后执行调用函数</li>
<li>window 在调用的时候可以省略</li>
<li>延时时间单位为毫秒，但是可以省略，省略默认是 0</li>
<li>调用函数可以直接写函数，也可以写函数名</li>
<li>页面中可能有很多的定时器，我们经常给定时器加标识符</li>
<li>回调函数 callback()</li>
</ul></li>
<li><p>setInterval(调用函数, 重复时间)</p>
<ul>
<li>window 可以省略</li>
<li>这个调用函数可以直接写函数，或者写函数名或者采取字符串"函数名()"三种形式</li>
<li>间隔的毫秒省略默认是0，如果写，必须是毫秒，表示每隔多少毫秒就自动调用这个函数</li>
<li>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符</li>
</ul></li>
</ul></li>
<li>停止 setTimeout() 定时器</li>
<li>window.clearTimeout(timeout)</li>
</ul></li>
<li><h4 id="js执行机制">JS执行机制</h4>
<ul>
<li><h5 id="js-是单线程">JS 是单线程</h5>
<ul>
<li>JavaScript
语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。这是因为
JavaScript 这门脚本语言诞生的致命所致——JavaScript
是为处理页面中用户的交互，以及操作 DOM 而诞生的。比如我们对某个 DOM
进行添加和删除操作，不能同时进行。应该先进行添加，之后再删除。</li>
<li>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样导致的问题是：如果
JS
执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</li>
</ul></li>
<li><h5 id="同步和异步">同步和异步</h5>
<ul>
<li><p>为了解决这个问题，利用多核 CPU 的计算能力，HTML 提出 Web Worker
标准，允许 JavaScript 脚本创建多个线程。于是，JS
中出现了同步和异步。</p></li>
<li><p>同步</p>
<ul>
<li><p>前一个任务结束之后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。</p></li>
<li><p>同步任务</p>
<ul>
<li>同步任务都在主线程上执行，形成一个执行栈</li>
</ul></li>
</ul></li>
<li><p>异步</p>
<ul>
<li><p>做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。</p></li>
<li><p>异步任务</p>
<ul>
<li>JS 的异步是通过回调函数实现的</li>
<li>1、普通事件，如 click、resize 等</li>
<li>2、资源加载，如 load、error 等</li>
<li>3、定时器，包括 setInerval、setTimeout 等</li>
<li>异步任务相关回调函数添加到任务队列中（任务队列也称消息队列）</li>
</ul></li>
</ul></li>
</ul></li>
<li><h5 id="js-执行机制">JS 执行机制</h5>
<ul>
<li>先执行执行栈中的同步任务。</li>
<li>异步任务（回调函数）放入任务队列中。</li>
<li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</li>
<li>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环（event
loop）。</li>
</ul></li>
</ul></li>
<li><h4 id="location">Location</h4>
<ul>
<li><h5 id="什么是-location-对象">什么是 location 对象</h5>
<ul>
<li>window 对象给我们提供了一个 location 属性用于获取或设置窗体的
URL，并且可以用于解析
URL。因为这个属性返回的是一个对象，所以我们将这个对象也成为 location
对象。</li>
</ul></li>
<li><h5 id="url">URL</h5>
<ul>
<li>统一资源定位符（Uniform Resource Locator,
URL）是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的
URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</li>
<li>protocol://host[:port]/path/[?query]#fragment</li>
</ul></li>
<li><h5 id="location-对象的属性">location 对象的属性</h5>
<ul>
<li><p>location.href</p>
<ul>
<li>获取或者设置 整个 URL</li>
</ul></li>
<li><p>location.host</p>
<ul>
<li>返回主机（域名）</li>
</ul></li>
<li><p>location.port</p>
<ul>
<li>返回端口号 如果未写返回 空字符串</li>
</ul></li>
<li><p>location.pathname</p>
<ul>
<li>返回路径</li>
</ul></li>
<li><p>location.search</p>
<ul>
<li>返回参数</li>
</ul></li>
<li><p>location.hash</p>
<ul>
<li>返回片段 #后面内容 常见于链接 锚点</li>
</ul></li>
</ul></li>
<li><h5 id="location-对象方法">location 对象方法</h5>
<ul>
<li><p>location.assign()</p>
<ul>
<li><p>跟 href 一样，可以跳转页面（也称重定向页面）</p>
<ul>
<li>记录浏览历史，可以实现后退功能</li>
</ul></li>
</ul></li>
<li><p>location.replace()</p>
<ul>
<li><p>替换当前页面，因为不记录历史，所以不能后退页面</p>
<ul>
<li>不记录历史，所以不能后退</li>
</ul></li>
</ul></li>
<li><p>location.reload()</p>
<ul>
<li>重新加载页面，相当于刷新按钮或者 F5 如果参数为 true 强制刷新 CTRL +
F5</li>
</ul></li>
</ul></li>
<li><h5 id="navigation-对象">navigation 对象</h5></li>
<li><h5 id="history-对象">history 对象</h5>
<ul>
<li><p>back()</p>
<ul>
<li>可以后退功能</li>
</ul></li>
<li><p>forward()</p>
<ul>
<li>前进功能</li>
</ul></li>
<li><p>go(参数)</p>
<ul>
<li>前进后退功能 参数如果是1 前进1个页面 如果是-1 后退一个页面</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>好玩的 Github</title>
    <url>/2021/246677465.html</url>
    <content><![CDATA[<p>前年的时候，做过一些 <a
href="https://github.com/zEpoch/next-beautify">Hexo Next
主题的美化</a>，后来再上传的时候，就一股脑全部上传上去了，当然也没那么傻，倒是还是删掉了
node_modules 后再上传的，但是却是没有删掉 package.json，后来呢，Github
就经常提醒我有安全问题。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210719142124146.png"
alt="image-20210719142124146" /></p>
<p>打开一看，好家伙，全都是依赖警报</p>
<span id="more"></span>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210719142440142.png"
alt="image-20210719142440142" /></p>
<p>然后细看一下会发现大都是依赖要进行升级了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210719142707537.png" alt="image-20210719142707537" style="zoom:100%;" /></p>
<p>好在 Github
还是很舒服的，可以直接在线更改升级，还有个小机器人帮你升级。美滋滋</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210719142825189.png"
alt="image-20210719142825189" /></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>138.复制带随机指针的链表</title>
    <url>/2021/3186910758.html</url>
    <content><![CDATA[<p><a
href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/">今天的力扣题目</a>的难度是中等，但是实际上做起来却感到稍微有些难。好吧，其实是因为俺太菜了嘤嘤嘤。题干如下：</p>
<span id="more"></span>
<blockquote>
<p>给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random
，该指针可以指向链表中的任何节点或空节点。</p>
<p>构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新
节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next
指针和 random
指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点
。</p>
<p>例如，如果原链表中有 X 和 Y 两个节点，其中 X.random --&gt; Y
。那么在复制链表中对应的两个节点 x 和 y ，同样有 x.random --&gt; y
。</p>
<p>返回复制链表的头节点。</p>
<p>用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个
[val, random_index] 表示：</p>
<p>val：一个表示 Node.val 的整数。
random_index：随机指针指向的节点索引（范围从 0 到
n-1）；如果不指向任何节点，则为 null 。 你的代码 只 接受原链表的头节点
head 作为传入参数。</p>
</blockquote>
<p>示例：</p>
<blockquote>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/138.%20%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/e1.png"
alt="e1" /></p>
<p>输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</p>
</blockquote>
<p>对于链表 <span
class="math inline">\(A-&gt;B-&gt;C\)</span>，我们可以将其拆分为 <span
class="math inline">\(A-&gt;A&#39;-&gt;B-&gt;B&#39;-&gt;C-&gt;C&#39;\)</span>。对于任意一个节点
<span class="math inline">\(S\)</span>，其拷贝节点 <span
class="math inline">\(S&#39;\)</span> 即为其后继节点，那么现在就可以将
<span class="math inline">\(S&#39;\)</span> 的随机节点指向 <span
class="math inline">\(S.random.next\)</span>，即 <span
class="math inline">\(p.next.random =
p.random.next\)</span>，之后将拷贝链与原链分离开来。图示如下（<a
href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/solution/fu-zhi-dai-sui-ji-zhi-zhen-de-lian-biao-rblsf/">图源</a>）：</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/138.%20%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/1.png"
alt="1" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/138.%20%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/2.png"
alt="2" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/138.%20%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/3.png"
alt="3" /></p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/138.%20%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/4.png"
alt="4" /></p>
<p>代码如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token punctuation">:</span> <span class="token string">'Node'</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> random<span class="token punctuation">:</span> <span class="token string">'Node'</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span>
        self<span class="token punctuation">.</span>random <span class="token operator">=</span> random


<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> <span class="token string">'Node'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'Node'</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        p <span class="token operator">=</span> head
        <span class="token keyword">while</span> p<span class="token punctuation">:</span>
            new_node <span class="token operator">=</span> Node<span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span>
            new_node<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>
            p<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> new_node
            p <span class="token operator">=</span> new_node<span class="token punctuation">.</span><span class="token builtin">next</span>
        p <span class="token operator">=</span> head
        <span class="token keyword">while</span> p<span class="token punctuation">:</span>
            <span class="token keyword">if</span> p<span class="token punctuation">.</span>random<span class="token punctuation">:</span>
                p<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>random <span class="token operator">=</span> p<span class="token punctuation">.</span>random<span class="token punctuation">.</span><span class="token builtin">next</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
        
        p <span class="token operator">=</span> head
        dummy <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span>
        cur <span class="token operator">=</span> dummy
        <span class="token keyword">while</span> p<span class="token punctuation">:</span>
            cur<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            p<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token builtin">next</span>
            p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>LeetCode</tag>
        <tag>搜索</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>前端代码规范(1)</title>
    <url>/2021/4204481673.html</url>
    <content><![CDATA[<h1 id="代码规范">代码规范</h1>
<h2 id="概述">1. 概述</h2>
<p>欢迎使用品优购代码规范，
这个是我借鉴京东前端代码规范，组织的品优购内部规范。旨在增强团队开发协作、提高代码质量和打造开发基石的编码规范，</p>
<p>以下规范是团队基本约定的内容，必须严格遵循。</p>
<span id="more"></span>
<h4 id="html规范">HTML规范</h4>
<p>基于 <a href="http://www.w3.org/">W3C</a>、<a
href="https://developer.apple.com/">苹果开发者</a>
等官方文档，并结合团队业务和开发过程中总结的规范约定，让页面HTML代码更具语义性。</p>
<h4 id="图片规范">图片规范</h4>
<p>了解各种图片格式特性，根据特性制定图片规范，包括但不限于图片的质量约定、图片引入方式、图片合并处理等，旨在从图片层面优化页面性能。</p>
<h4 id="css规范">CSS规范</h4>
<p>统一规范团队 CSS 代码书写风格和使用 CSS
预编译语言语法风格，提供常用媒体查询语句和浏览器私有属性引用，并从业务层面统一规范常用模块的引用。</p>
<h4 id="命名规范">命名规范</h4>
<p>从
<code>目录</code>、<code>图片</code>、<code>HTML/CSS文件</code>、<code>ClassName</code>
的命名等层面约定规范团队的命名习惯，增强团队代码的可读性。</p>
<h2 id="html-规范">2. HTML 规范</h2>
<h3 id="doctype-声明">DOCTYPE 声明</h3>
<p>HTML文件必须加上 DOCTYPE 声明，并统一使用 HTML5 的文档声明：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>HTML5标准模版</strong></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>HTML5标准模版<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="页面语言lang">页面语言lang</h3>
<p>推荐使用属性值 <code>cmn-Hans-CN</code>（简体,
中国大陆），但是考虑浏览器和操作系统的兼容性，目前仍然使用
<code>zh-CN</code> 属性值</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>更多地区语言参考：</p>
<pre class="line-numbers language-none"><code class="language-none">zh-SG 中文 (简体, 新加坡)   对应 cmn-Hans-SG 普通话 (简体, 新加坡)
zh-HK 中文 (繁体, 香港)     对应 cmn-Hant-HK 普通话 (繁体, 香港)
zh-MO 中文 (繁体, 澳门)     对应 cmn-Hant-MO 普通话 (繁体, 澳门)
zh-TW 中文 (繁体, 台湾)     对应 cmn-Hant-TW 普通话 (繁体, 台湾)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="charset-字符集合">charset 字符集合</h3>
<p>一般情况下统一使用 “UTF-8” 编码</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>由于历史原因，有些业务可能会使用 “GBK” 编码</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;meta charset&#x3D;&quot;GBK&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>请尽量统一写成标准的 “UTF-8”，不要写成 “utf-8” 或 “utf8” 或
“UTF8”。根据 <a
href="http://www.ietf.org/rfc/rfc3629">IETF对UTF-8的定义</a>，其编码标准的写法是
“UTF-8”；而 UTF8 或 utf8 的写法只是出现在某些编程系统中，如 .NET
framework 的类 System.Text.Encoding 中的一个属性名就叫 UTF8。</p>
<h3 id="书写风格">书写风格</h3>
<h4 id="html代码大小写">HTML代码大小写</h4>
<p>HTML标签名、类名、标签属性和大部分属性值统一用小写</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;DEMO&quot;&gt;&lt;&#x2F;div&gt;
	
&lt;DIV CLASS&#x3D;&quot;DEMO&quot;&gt;&lt;&#x2F;DIV&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="类型属性">类型属性</h3>
<p>不需要为 CSS、JS 指定类型属性，HTML5 中默认已包含</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&quot; &gt;
&lt;script src&#x3D;&quot;&quot;&gt;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;&quot; &gt;
&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&quot; &gt;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="元素属性">元素属性</h3>
<ul>
<li>元素属性值使用双引号语法</li>
<li>元素属性值可以写上的都写上</li>
</ul>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;input type&#x3D;&quot;text&quot;&gt;
&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;name&quot; checked&#x3D;&quot;checked&quot; &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;input type&#x3D;text&gt;	
&lt;input type&#x3D;&#39;text&#39;&gt;
&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;name&quot; checked &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="特殊字符引用">特殊字符引用</h3>
<p>文本可以和字符引用混合出现。这种方法可以用来转义在文本中不能合法出现的字符。</p>
<p>在 HTML 中不能使用小于号 “&lt;” 和大于号
“&gt;”特殊字符，浏览器会将它们作为标签解析，若要正确显示，在 HTML
源代码中使用字符实体</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;a href&#x3D;&quot;#&quot;&gt;more&gt;&gt;&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;a href&#x3D;&quot;#&quot;&gt;more&gt;&gt;&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="代码缩进">代码缩进</h3>
<p>统一使用四个空格进行代码缩进，使得各编辑器表现一致（各编辑器有相关配置）</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;jdc&quot;&gt;
    &lt;a href&#x3D;&quot;#&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="代码嵌套">代码嵌套</h3>
<p>元素嵌套规范，每个块状元素独立一行，内联元素可选</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div&gt;
    &lt;h1&gt;&lt;&#x2F;h1&gt;
    &lt;p&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;	
&lt;p&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div&gt;
    &lt;h1&gt;&lt;&#x2F;h1&gt;&lt;p&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;	
&lt;p&gt; 
    &lt;span&gt;&lt;&#x2F;span&gt;
    &lt;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>段落元素与标题元素只能嵌套内联元素</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;h1&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;h1&gt;&lt;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;div&gt;&lt;&#x2F;div&gt;&lt;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="图片规范-1">3. 图片规范</h2>
<h3 id="内容图">内容图</h3>
<p>内容图多以商品图等照片类图片形式存在，颜色较为丰富，文件体积较大</p>
<ul>
<li>优先考虑 JPEG 格式，条件允许的话优先考虑 WebP 格式</li>
<li>尽量不使用PNG格式，PNG8 色位太低，PNG24 压缩率低，文件体积大</li>
<li><strong>PC平台单张的图片的大小不应大于 200KB。</strong></li>
</ul>
<h3 id="背景图">背景图</h3>
<p>背景图多为图标等颜色比较简单、文件体积不大、起修饰作用的图片</p>
<ul>
<li>PNG 与 GIF 格式，优先考虑使用 PNG
格式,PNG格式允许更多的颜色并提供更好的压缩率</li>
<li>图像颜色比较简单的，如纯色块线条图标，优先考虑使用 PNG8
格式，避免不使用 JPEG 格式</li>
<li>图像颜色丰富而且图片文件不太大的（40KB
以下）或有半透明效果的优先考虑 PNG24 格式</li>
<li>图像颜色丰富而且文件比较大的（40KB - 200KB）优先考虑 JPEG 格式</li>
<li>条件允许的，优先考虑 WebP 代替 PNG 和 JPEG 格式</li>
</ul>
<h2 id="css规范-1">4. CSS规范</h2>
<h3 id="代码格式化">代码格式化</h3>
<p>样式书写一般有两种：一种是紧凑格式 (Compact)</p>
<pre class="line-numbers language-none"><code class="language-none">.jdc&#123; display: block;width: 50px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>一种是展开格式（Expanded）</p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123;
    display: block;
    width: 50px;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>团队约定</strong></p>
<p>统一使用展开格式书写样式</p>
<h3 id="代码大小写">代码大小写</h3>
<p>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;* 推荐 *&#x2F;
.jdc&#123;
	display:block;
&#125;
	
&#x2F;* 不推荐 *&#x2F;
.JDC&#123;
	DISPLAY:BLOCK;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="选择器">选择器</h3>
<ul>
<li>尽量少用通用选择器 <code>*</code></li>
<li>不使用 ID 选择器</li>
<li>不使用无具体语义定义的标签选择器</li>
</ul>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 推荐 */</span>
<span class="token selector">.jdc</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token selector">.jdc li</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token selector">.jdc li p</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token comment">/* 不推荐 */</span>
<span class="token selector">*</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token selector">#jdc</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token selector">.jdc div</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="代码缩进-1">代码缩进</h3>
<p>统一使用四个空格进行代码缩进，使得各编辑器表现一致（各编辑器有相关配置）</p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123;
    width: 100%;
    height: 100%;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="分号">分号</h3>
<p>每个属性声明末尾都要加分号；</p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123;
    width: 100%;
    height: 100%;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="代码易读性">代码易读性</h3>
<p>左括号与类名之间一个空格，冒号与属性值之间一个空格</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123; 
    width: 100%; 
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">.jdc&#123; 
    width:100%;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>逗号分隔的取值，逗号之后一个空格</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123;
    box-shadow: 1px 1px 1px #333, 2px 2px 2px #ccc;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123;
    box-shadow: 1px 1px 1px #333,2px 2px 2px #ccc;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>为单个css选择器或新申明开启新行</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.jdc, 
.jdc_logo, 
.jdc_hd</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #ff0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.nav</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.jdc,jdc_logo,.jdc_hd</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #ff0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token selector">.nav</span><span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>颜色值 <code>rgb()</code> <code>rgba()</code> <code>hsl()</code>
<code>hsla()</code> <code>rect()</code>
中不需有空格，且取值不要带有不必要的 0</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123;
    color: rgba(255,255,255,.5);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123;
    color: rgba( 255, 255, 255, 0.5 );
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>属性值十六进制数值能用简写的尽量用简写</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-none"><code class="language-none">.jdc &#123;
    color: #fff;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.jdc</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>不要为 <code>0</code> 指明单位</p>
<p><em>推荐：</em></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.jdc</span> <span class="token punctuation">&#123;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><em>不推荐：</em></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.jdc</span> <span class="token punctuation">&#123;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0px 10px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="属性值引号">属性值引号</h3>
<p>css属性值需要用到引号时，统一使用单引号</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 推荐 */</span>
<span class="token selector">.jdc</span> <span class="token punctuation">&#123;</span> 
	<span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Hiragino Sans GB'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* 不推荐 */</span>
<span class="token selector">.jdc</span> <span class="token punctuation">&#123;</span> 
	<span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Hiragino Sans GB"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="属性书写顺序">属性书写顺序</h3>
<p>建议遵循以下顺序：</p>
<ol type="1">
<li>布局定位属性：display / position / float / clear / visibility /
overflow（建议 display 第一个写，毕竟关系到模式）</li>
<li>自身属性：width / height / margin / padding / border /
background</li>
<li>文本属性：color / font / text-decoration / text-align /
vertical-align / white- space / break-word</li>
<li>其他属性（CSS3）：content / cursor / border-radius / box-shadow /
text-shadow / background:linear-gradient …</li>
</ol>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.jdc</span> <span class="token punctuation">&#123;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 20px 0<span class="token punctuation">;</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> <span class="token string">'Helvetica Neue'</span><span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>.5<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
    <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
    <span class="token property">-o-border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
    <span class="token property">-ms-border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a
href="https://www.mozilla.org/css/base/content.css">mozilla官方属性顺序推荐</a></p>
<h2 id="命名规范-1">命名规范</h2>
<p>由历史原因及个人习惯引起的 DOM
结构、命名不统一，导致不同成员在维护同一页面时，效率低下，迭代、维护成本极高。</p>
<h3 id="目录命名">目录命名</h3>
<ul>
<li>项目文件夹：shoping</li>
<li>样式文件夹：css</li>
<li>脚本文件夹：js</li>
<li>样式类图片文件夹：img</li>
<li>产品类图片文件夹： upload</li>
<li>字体类文件夹： fonts</li>
</ul>
<h3 id="classname命名">ClassName命名</h3>
<p>ClassName的命名应该尽量精短、明确，必须以<strong>字母开头命名</strong>，且<strong>全部字母为小写</strong>，单词之间<strong>统一使用下划线</strong>
“_” 连接</p>
<p>.nav_top</p>
<h4 id="常用命名推荐">常用命名推荐</h4>
<p><strong>注意</strong>：ad、banner、gg、guanggao
等有机会和广告挂勾的不建议直接用来做ClassName，因为有些浏览器插件（Chrome的广告拦截插件等）会直接过滤这些类名，因此</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;ad&quot;&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这种广告的英文或拼音类名不应该出现</p>
<p>另外，<strong>敏感不和谐字眼</strong>也不应该出现，如：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;fuck&quot;&gt;&lt;&#x2F;div&gt;
&lt;div class&#x3D;&quot;jer&quot;&gt;&lt;&#x2F;div&gt;
&lt;div class&#x3D;&quot;sm&quot;&gt;&lt;&#x2F;div&gt;
&lt;div class&#x3D;&quot;gcd&quot;&gt;&lt;&#x2F;div&gt; 
&lt;div class&#x3D;&quot;ass&quot;&gt;&lt;&#x2F;div&gt; 
&lt;div class&#x3D;&quot;KMT&quot;&gt;&lt;&#x2F;div&gt; 
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<table>
<thead>
<tr class="header">
<th>ClassName</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>about</td>
<td>关于</td>
</tr>
<tr class="even">
<td>account</td>
<td>账户</td>
</tr>
<tr class="odd">
<td>arrow</td>
<td>箭头图标</td>
</tr>
<tr class="even">
<td>article</td>
<td>文章</td>
</tr>
<tr class="odd">
<td>aside</td>
<td>边栏</td>
</tr>
<tr class="even">
<td>audio</td>
<td>音频</td>
</tr>
<tr class="odd">
<td>avatar</td>
<td>头像</td>
</tr>
<tr class="even">
<td>bg,background</td>
<td>背景</td>
</tr>
<tr class="odd">
<td>bar</td>
<td>栏（工具类）</td>
</tr>
<tr class="even">
<td>branding</td>
<td>品牌化</td>
</tr>
<tr class="odd">
<td>crumb,breadcrumbs</td>
<td>面包屑</td>
</tr>
<tr class="even">
<td>btn,button</td>
<td>按钮</td>
</tr>
<tr class="odd">
<td>caption</td>
<td>标题，说明</td>
</tr>
<tr class="even">
<td>category</td>
<td>分类</td>
</tr>
<tr class="odd">
<td>chart</td>
<td>图表</td>
</tr>
<tr class="even">
<td>clearfix</td>
<td>清除浮动</td>
</tr>
<tr class="odd">
<td>close</td>
<td>关闭</td>
</tr>
<tr class="even">
<td>col,column</td>
<td>列</td>
</tr>
<tr class="odd">
<td>comment</td>
<td>评论</td>
</tr>
<tr class="even">
<td>community</td>
<td>社区</td>
</tr>
<tr class="odd">
<td>container</td>
<td>容器</td>
</tr>
<tr class="even">
<td>content</td>
<td>内容</td>
</tr>
<tr class="odd">
<td>copyright</td>
<td>版权</td>
</tr>
<tr class="even">
<td>current</td>
<td>当前态，选中态</td>
</tr>
<tr class="odd">
<td>default</td>
<td>默认</td>
</tr>
<tr class="even">
<td>description</td>
<td>描述</td>
</tr>
<tr class="odd">
<td>details</td>
<td>细节</td>
</tr>
<tr class="even">
<td>disabled</td>
<td>不可用</td>
</tr>
<tr class="odd">
<td>entry</td>
<td>文章，博文</td>
</tr>
<tr class="even">
<td>error</td>
<td>错误</td>
</tr>
<tr class="odd">
<td>even</td>
<td>偶数，常用于多行列表或表格中</td>
</tr>
<tr class="even">
<td>fail</td>
<td>失败（提示）</td>
</tr>
<tr class="odd">
<td>feature</td>
<td>专题</td>
</tr>
<tr class="even">
<td>fewer</td>
<td>收起</td>
</tr>
<tr class="odd">
<td>field</td>
<td>用于表单的输入区域</td>
</tr>
<tr class="even">
<td>figure</td>
<td>图</td>
</tr>
<tr class="odd">
<td>filter</td>
<td>筛选</td>
</tr>
<tr class="even">
<td>first</td>
<td>第一个，常用于列表中</td>
</tr>
<tr class="odd">
<td>footer</td>
<td>页脚</td>
</tr>
<tr class="even">
<td>forum</td>
<td>论坛</td>
</tr>
<tr class="odd">
<td>gallery</td>
<td>画廊</td>
</tr>
<tr class="even">
<td>group</td>
<td>模块，清除浮动</td>
</tr>
<tr class="odd">
<td>header</td>
<td>页头</td>
</tr>
<tr class="even">
<td>help</td>
<td>帮助</td>
</tr>
<tr class="odd">
<td>hide</td>
<td>隐藏</td>
</tr>
<tr class="even">
<td>hightlight</td>
<td>高亮</td>
</tr>
<tr class="odd">
<td>home</td>
<td>主页</td>
</tr>
<tr class="even">
<td>icon</td>
<td>图标</td>
</tr>
<tr class="odd">
<td>info,information</td>
<td>信息</td>
</tr>
<tr class="even">
<td>last</td>
<td>最后一个，常用于列表中</td>
</tr>
<tr class="odd">
<td>links</td>
<td>链接</td>
</tr>
<tr class="even">
<td>login</td>
<td>登录</td>
</tr>
<tr class="odd">
<td>logout</td>
<td>退出</td>
</tr>
<tr class="even">
<td>logo</td>
<td>标志</td>
</tr>
<tr class="odd">
<td>main</td>
<td>主体</td>
</tr>
<tr class="even">
<td>menu</td>
<td>菜单</td>
</tr>
<tr class="odd">
<td>meta</td>
<td>作者、更新时间等信息栏，一般位于标题之下</td>
</tr>
<tr class="even">
<td>module</td>
<td>模块</td>
</tr>
<tr class="odd">
<td>more</td>
<td>更多（展开）</td>
</tr>
<tr class="even">
<td>msg,message</td>
<td>消息</td>
</tr>
<tr class="odd">
<td>nav,navigation</td>
<td>导航</td>
</tr>
<tr class="even">
<td>next</td>
<td>下一页</td>
</tr>
<tr class="odd">
<td>nub</td>
<td>小块</td>
</tr>
<tr class="even">
<td>odd</td>
<td>奇数，常用于多行列表或表格中</td>
</tr>
<tr class="odd">
<td>off</td>
<td>鼠标离开</td>
</tr>
<tr class="even">
<td>on</td>
<td>鼠标移过</td>
</tr>
<tr class="odd">
<td>output</td>
<td>输出</td>
</tr>
<tr class="even">
<td>pagination</td>
<td>分页</td>
</tr>
<tr class="odd">
<td>pop,popup</td>
<td>弹窗</td>
</tr>
<tr class="even">
<td>preview</td>
<td>预览</td>
</tr>
<tr class="odd">
<td>previous</td>
<td>上一页</td>
</tr>
<tr class="even">
<td>primary</td>
<td>主要</td>
</tr>
<tr class="odd">
<td>progress</td>
<td>进度条</td>
</tr>
<tr class="even">
<td>promotion</td>
<td>促销</td>
</tr>
<tr class="odd">
<td>rcommd,recommendations</td>
<td>推荐</td>
</tr>
<tr class="even">
<td>reg,register</td>
<td>注册</td>
</tr>
<tr class="odd">
<td>save</td>
<td>保存</td>
</tr>
<tr class="even">
<td>search</td>
<td>搜索</td>
</tr>
<tr class="odd">
<td>secondary</td>
<td>次要</td>
</tr>
<tr class="even">
<td>section</td>
<td>区块</td>
</tr>
<tr class="odd">
<td>selected</td>
<td>已选</td>
</tr>
<tr class="even">
<td>share</td>
<td>分享</td>
</tr>
<tr class="odd">
<td>show</td>
<td>显示</td>
</tr>
<tr class="even">
<td>sidebar</td>
<td>边栏，侧栏</td>
</tr>
<tr class="odd">
<td>slide</td>
<td>幻灯片，图片切换</td>
</tr>
<tr class="even">
<td>sort</td>
<td>排序</td>
</tr>
<tr class="odd">
<td>sub</td>
<td>次级的，子级的</td>
</tr>
<tr class="even">
<td>submit</td>
<td>提交</td>
</tr>
<tr class="odd">
<td>subscribe</td>
<td>订阅</td>
</tr>
<tr class="even">
<td>subtitle</td>
<td>副标题</td>
</tr>
<tr class="odd">
<td>success</td>
<td>成功（提示）</td>
</tr>
<tr class="even">
<td>summary</td>
<td>摘要</td>
</tr>
<tr class="odd">
<td>tab</td>
<td>标签页</td>
</tr>
<tr class="even">
<td>table</td>
<td>表格</td>
</tr>
<tr class="odd">
<td>txt,text</td>
<td>文本</td>
</tr>
<tr class="even">
<td>thumbnail</td>
<td>缩略图</td>
</tr>
<tr class="odd">
<td>time</td>
<td>时间</td>
</tr>
<tr class="even">
<td>tips</td>
<td>提示</td>
</tr>
<tr class="odd">
<td>title</td>
<td>标题</td>
</tr>
<tr class="even">
<td>video</td>
<td>视频</td>
</tr>
<tr class="odd">
<td>wrap</td>
<td>容器，包，一般用于最外层</td>
</tr>
<tr class="even">
<td>wrapper</td>
<td>容器，包，一般用于最外层</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>愿河南平安</title>
    <url>/2021/3942837084.html</url>
    <content><![CDATA[<p>一直在看着新闻，镜头前的消防战士来往没停过，拖着橡皮艇从南边的地铁站和商场将人员运到较为安全的区域，其中还有不少一两岁的孩子。刚刚记者突然间就断线了，心就突然揪住了，就挺伤心的，莫名的哭了起来</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-fa1321ca1c578d58bcf290cd9237e6b1_720w.jpg"
alt="愿河南平安v2-fa1321ca1c578d58bcf290cd9237e6b1_720w" /></p>
<span id="more"></span>
<p>切到了高架路的设备采像</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-c376cf38bfa6935f54a3e66a5236dc78_720w.jpg"
alt="愿河南平安v2-c376cf38bfa6935f54a3e66a5236dc78_720w" /></p>
<p>就逐渐看到路面上开始逐渐有车辆的走动，采像机前的雨滴逐渐减小</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-3c666b6f469019e7b091bdfdc75bc55b_720w.jpg"
alt="愿河南平安v2-3c666b6f469019e7b091bdfdc75bc55b_720w" /></p>
<p>约摸二三十分钟后，记者重新连线了，但是却还是一片黑暗，缺少灯光</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-fb1ae0008a50819d823dfc040188f2ad_720w.jpg"
alt="愿河南平安v2-fb1ae0008a50819d823dfc040188f2ad_720w" /></p>
<p>之后记者也是在黑暗里摸索着找到了较为光亮地方，肉眼可见的雨在逐渐减小</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-bb65d10bd07ed67da95dde420c9d2d8e_720w.jpg"
alt="愿河南平安v2-bb65d10bd07ed67da95dde420c9d2d8e_720w" /></p>
<p>现在记者可以前往之前待救援的南边地区，已经是开始好转起来了；继续向南走还是有很长的一段没有灯光的路，后来开始看到了一家开着的店</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-c8d84a77447826b14a1699e990b0c072_720w.jpg"
alt="愿河南平安v2-c8d84a77447826b14a1699e990b0c072_720w" /></p>
<p>，店里还是很多的人在这边作为一个休息区，店主提供了热水充电宝之类的；店门口的是位广东的同志，来河南旅游，算是碰上了前所未遇的一个特大暴雨；</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-9c577ac3d2f4726408d86b0fd7b8a7da_720w.jpg"
alt="愿河南平安v2-9c577ac3d2f4726408d86b0fd7b8a7da_720w" /></p>
<p>店主也是很勇敢的人，公司可以让直接关门下班了，但是店主很有社会责任感，坚持开门，通宵收容不能回家的人，真的很感动；</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-30942b423eda147cd3b4e8420e210aaa_720w.jpg"
alt="愿河南平安v2-30942b423eda147cd3b4e8420e210aaa_720w" /></p>
<p>采访完毕后记者继续想南边的黑暗处走去，雨又开始大了起来，愿一切平安，众志成城，共克时艰</p>
<p>继续向前走是碰到了一连串的车队，其实是不能向前走了，前面被淹了</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-fe0962dc416428b9610ec0044545dafa_720w.jpg"
alt="愿河南平安v2-fe0962dc416428b9610ec0044545dafa_720w" /></p>
<p>再往前有一辆公交车，车上有很多人在休息</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-ea205c6ed312e1567a37c0a71014ff46_720w.jpg"
alt="愿河南平安v2-ea205c6ed312e1567a37c0a71014ff46_720w" /></p>
<p>说着说着，来了一个出租车师傅，这位师傅看到了直播，敲开了自己家楼下没有开门的店，买了全部的食物和水，跟着直播走的路，送来了食物和矿泉水，还特地带来了热水</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-0ba2b6fb175867cd6a50d23a156746f2_720w.jpg"
alt="师傅送来了食物和水" /></p>
<p>好心的出租车师傅不愿意透露姓名，但是记者特地拍了车牌号，感谢好心的出租车师傅，不仅送来了吃的，还送了充电器充电线</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89/%E6%84%BF%E6%B2%B3%E5%8D%97%E5%B9%B3%E5%AE%89v2-a91d255d691911ce371f1da60887a1fe_720wlas.jpg"
alt="司机师傅的车牌号" /></p>
<p>愿一切平安。</p>
]]></content>
      <tags>
        <tag>家乡</tag>
      </tags>
  </entry>
  <entry>
    <title>战争的目的在于消灭战争</title>
    <url>/2021/3536968392.html</url>
    <content><![CDATA[<p>今日读毛选，读到了中国革命战争的战略问题。我觉得毛泽东真的是一位军事奇才，他对战争的规律总结得十分到位，这是一套方法论，不管用到何处都能经过一定程度的变化，从而发挥作用的方法。</p>
<span id="more"></span>
<blockquote>
<p>战争的规律——这是任何指导战争的人不能不研究和不能不解决的问题。
革命战争的规律——这是任何指导革命战争的人不能不研究和不能不解决的问题。
中国革命战争的规律——这是任何指导中国革命战争的人不能不研究和不能不解决的问题。</p>
<p>我们现在是从事战争，我们的战争是革命战争，我们的革命战争是在中国这个半殖民地的半封建的国度里进行的。因此，我们不但要研究一般战争的规律，还要研究特殊的革命战争的规律，还要研究更加特殊的中国革命战争的规律。</p>
<p>大家明白，不论做什么事，不懂得那件事的情形，它的性质，它和它以外的事情的关联，就不知道那件事的规律，就不知道如何去做，就不能做好那件事。</p>
<p>战争——从有私有财产和有阶级以来就开始了的、用以解决阶级和阶级、民族和民族、国家和国家、政治集团和政治集团之间、在一定发展阶段上的矛盾的一种最高的斗争形式。不懂得它的情形，它的性质，它和它以外事情的关联，就不知道战争的规律，就不知道如何指导战争，就不能打胜仗。</p>
<p>革命战争——革命的阶级战争和革命的民族战争，在一般战争的情形和性质之外，有它的特殊的情形和性质。因此，在一般的战争规律之外，有它的一些特殊的规律。不懂得这些特殊的情形和性质，不懂得它的特殊的规律，就不能指导革命战争，就不能在革命战争中打胜仗。</p>
<p>中国革命战争——不论是国内战争或民族战争，是在中国的特殊环境之内进行的，比较一般的战争，一般的革命战争，又有它的特殊的情形和特殊的性质。因此，在一般战争和一般革命战争的规律之外，又有它的一些特殊的规律。如果不懂得这些，就不能在中国革命战争中打胜仗。</p>
</blockquote>
<p>他没有专注于一般战争的经验，而是吸取各个战争的关键因素，对于中国革命战争，他没有照搬照用其他民族、国家的那一套老一套，或者是说别人特有的战争形式；但是也不是完全不用，而是学习适合自己战争的因素，尊重过去流血的经验，但是还应该尊重自己流血的经验。不仅学习俄国的革命经验，也要了解苏联内战和苏联红军的特殊性；学习北伐战争的经验，但是要了解到当时的战争的情况已发生了变化。由此看来，战争情况的不同，决定着不同的战争指导规律，有时间、地域和性质的差别。从时间的条件说，战争和战争指导规律都是发展的，各个历史阶段有各个历史阶段的特点，因而战争规律也各有其特点，不能呆板地移用于不同的阶段。</p>
<p>关于战争的目的，我觉得毛泽东写的这个是最符合马克思主义的</p>
<blockquote>
<p>战争——这个人类互相残杀的怪物，人类社会的发展终久要把它消灭的，而且就在不远的将来会要把它消灭的。但是消灭它的方法只有一个，就是用战争反对战争，用革命战争反对反革命战争，用民族革命战争反对民族反革命战争，用阶级革命战争反对阶级反革命战争。历史上的战争，只有正义的和非正义的两类。我们是拥护正义战争反对非正义战争的。一切反革命战争都是非正义的，一切革命战争都是正义的。人类的战争生活时代将要由我们之手而结束，我们所进行的战争，毫无疑义地是属于最后战争的一部分。但是我们所面临的战争，毫无疑义又是最大的和最残酷的战争的一部分。最大的和最残酷的非正义的反革命的战争，迫临在我们的头上，我们如果不打起正义战争的旗帜，人类的大多数就要遭受摧残。人类正义战争的旗帜是拯救人类的旗帜，中国正义战争的旗帜是拯救中国的旗帜。人类的大多数和中国人的大多数所举行的战争，毫无疑义地是正义的战争，是拯救人类拯救中国的至高无上的荣誉的事业，是把全世界历史转到新时代的桥梁。人类社会进步到消灭了阶级，消灭了国家，到了那时，什么战争也没有了，反革命战争没有了，革命战争也没有了，非正义战争没有了，正义战争也没有了，这就是人类的永久和平的时代。我们研究革命战争的规律，出发于我们要求消灭一切战争的志愿，这是区别我们共产党人和一切剥削阶级的界线。</p>
</blockquote>
]]></content>
      <tags>
        <tag>毛选</tag>
      </tags>
  </entry>
  <entry>
    <title>我的星座分析</title>
    <url>/2021/1421664595.html</url>
    <content><![CDATA[<p>你对自己的认知其实没别人说那么的感性，因为自己干很多事情都有目的性，所以你潜意识认为一切的感性都是建立在理性的基础之上的，但其实并没有这么简单，你潜意识里的理性，其实也是建立在更深的一层感性的基础上，也就是第三层，一般你对自己的了解只停留在第一层，也就是认为自己是一个超级感性的人。</p>
<p>比如，你见了一个很好看的人，非常心动，一会儿的时间就脑补了和他的一生，然后自己沉浸在自己的世界里感性，这是第一层的感性。</p>
<p>随后就开始在现实中去根据自己刚刚幻想完后的余温再去想要做什么，要让自己变成什么样来去达到自己之前幻想的一个目的，这个过程就是你对自己理性方面的认知，虽然自己会代入真感情到里面去，但有的你会以对自己的了解然后明确这是一份站在理性基础上的一份感性，也就是第二层。</p>
<p><span id="more"></span></p>
<p>而其实你如果认为自己很聪明的话，对自己的认知停留在第二层的话，其实就是容易会对除了自己有目的性的人以外的人，造成不好的印象，也就是你会针对自己的目的，明确的去让一个人走进他五彩缤纷的情感世界，而所用的方式，在其他人眼里是不喜欢的，也就是好多人说你作什么的，而一个有理性基础的人，如果感性的话，也多多少少会照顾一下其他人的想法。</p>
<p>但你不会，是因为你已经想到了这点，所以进行了一种选择，就是不理会。这也就是你思想世界的第三层，就是我以我的感性来决定理性的选择，然后再在这个理性的选择上去感性，你以为我不知道我这样会引来厌恶？怎么可能，你是十二星座的终点，思想境界的顶流，只是你把所有精力都用在了刀刃上，这样才更有助于达成目的，不去在意别人的感受就是因为自己太懂，自己懂自己没办法照顾所有人的感受，自己没空照顾，自己也不喜欢照顾，自己也不必照顾，说就说呗，我就觉得说我的人挺low的，我会无语不过我的感情永远清澈透明。</p>
<p>你思想的第三层就是在自己喜欢的想法上，感性的情绪中，建立的一种选择，所以你就会做很多别人想做却不敢做的事情，这点客观来说其实已经吸引了所有人（除了被受影响的人）不过客观来说，就算是保守派，看到你这类太过于厉害的狠角色也会有敬意吧（除了戾气重的人）</p>
<p>你要的只有功成名就，自己可以舍弃的东西太多了，只要自己喜欢，就可以无底线无理由的去追求，你是个聪明人，却还是选择了这样的一条路，选择了一条充满浪漫气氛的独木桥。</p>
<p>你的心，敏感又强大、坚定又脆弱，这是两种心态，又融为一颗心，你的内心就是会互相追逐，互相打气，在一片小小天地中就能看到一个丰富的浪漫世界</p>
<p>该分析为博主的多年好友分析得来，博主觉得属实为自己。</p>
]]></content>
  </entry>
  <entry>
    <title>我们把你们想得太好了</title>
    <url>/2021/1333461694.html</url>
    <content><![CDATA[<p>“我们把你们想的太好了，我们认为你们会遵守基本的外交礼节”，有些话，原封不动，换个国家名，他居然还能用</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%88%91%E4%BB%AC%E6%8A%8A%E4%BD%A0%E4%BB%AC%E6%83%B3%E5%BE%97%E5%A4%AA%E5%A5%BD%E4%BA%86/%E6%88%91%E4%BB%AC%E6%8A%8A%E4%BD%A0%E4%BB%AC%E6%83%B3%E7%9A%84%E5%A4%AA%E5%A5%BD%E4%BA%86.png"
alt="我们把你们想的太好了" /></p>
]]></content>
      <tags>
        <tag>东京奥运会</tag>
      </tags>
  </entry>
  <entry>
    <title>日记（1）</title>
    <url>/2021/1510919766.html</url>
    <content><![CDATA[<p>七月三十一日，这个月结束了大三学年的学习，开始较为枯燥的考研生活，到了月底也是应该做一个小小的总结了，不然这个月也又是要浑浑噩噩地过去了。</p>
<span id="more"></span>
<h1 id="考研复习">考研复习</h1>
<p>先总结一下考研复习进度吧，在七月中把网课过了一遍，是华中科技大学杨广笑老师的<a
href="https://www.bilibili.com/video/BV1Ss411i7Mm">生物化学与分子生物学</a>，网课体验还是挺不错的，但是看完之后就觉得这门课要背诵要记忆的内容还是蛮多的，也有好多是自己没有掌握的，也是为过去自己没有好好学习这门科目感到羞愧；另外一个课是北京大学魏丽萍老师的<a
href="https://www.bilibili.com/video/BV13t411G7oh">生物信息学</a>，感觉还是蛮简单的，好多东西记忆都还是十分清晰，甚至觉得要是选择生物信息学进行考试的话甚至不用怎么复习。但是又觉得自己要是没有良好的生物化学基础的话怕是对日后的科研道路会有一些影响，于是呢，最后还是选择了生物化学与分子生物学进行复习，本来计划这个月先把第一本书看完来着，但是到目前吧，现在是晚上八点，还有八十页没看，待会儿看一下，应该能在明天也就是下个月开启新的篇章。</p>
<p>发现生物化学（第三版）这本书有一些有意思的地方，看的时候可以笑起来的那种。</p>
<blockquote>
<p>淋病奈瑟球菌（Nsisseria
gonorrhoeae）只感染人的生殖器和口腔黏膜，对人的其他部位和其他不起作用。😅</p>
</blockquote>
<p>怪起来了。</p>
<h1 id="代码之路">代码之路</h1>
<p>虽然说是在复习期间，也没有落下编程的功底，力扣的每日写题也是没有落下，成功拿到了七月的打卡牌子。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E8%80%83%E7%A0%94%E6%97%A5%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/image-20210731200525059.png"
alt="image-20210731200525059" /></p>
<p>关于开源项目的开发，倒是开启的一个小项目 <a
href="https://github.com/zEpoch/webStart">zEpoch/webStart
(github.com)</a>，算是一个前端的入门项目吧，希望能够在日后获得一个 Star
之类的吧。</p>
<p>关于这个博客，配置这个博客倒是配置了挺多的时间，也是做了很多的调试，目前来说速度和舒适度还是蛮比较不错的。</p>
]]></content>
      <tags>
        <tag>生活</tag>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>日记（3）</title>
    <url>/2021/4026992349.html</url>
    <content><![CDATA[<p>本来呢，暑假的计划是要读习的，奈何之前的毛选一还没读完，便是摸摸索索地读了毛选一，但也读的并不是很多，最重要地实践论和矛盾论倒是还没有看。</p>
<p>这毛选读起来是真的有意思，很多东西，修修改改，放到现在，依旧是可以用的，对于中国社会各阶层地分析，将近一百年过去了，中国的阶层中，也就是文中的“地主阶级和买办阶级”换了一种形式存在了下来，有人称其为“人民富豪”之类的。</p>
<span id="more"></span>
<p>这两年，天下并不太平，工薪阶层声讨“人民富豪”之类的呼声越来越高，<code>其势如暴风骤雨，迅猛异常，无论什么大的力量都将压抑不住。他们将冲决一切束缚他们的罗网，朝着解放生产力的路上迅跑。一切帝国主义、军阀、贪官污吏、土豪劣绅，都将被他们葬入坟墓。</code>很大一部分原因出在某些人屁股背离了无产阶级的穷人，凡是反抗最力、乱子闹得最大的地方，都是那些“人民富豪”为恶最甚的地方。农民、工人的眼睛，全然没有错的。谁个劣，谁个不劣，谁个最甚，谁个稍次，谁个惩办要严，谁个处罚从轻，农民、工人都有极明白的计算，罚不当罪的极少。</p>
<p>没有调查就没有发言权，这一点也是很重要的一件事情，尤其是在目前的互联网浪潮中。大多数人上网发表观点其实是所谓的情绪的宣泄，<code>看到一点表面，一个枝节，就指手画脚地说这也不对，那也错误</code>，而非通过调查查明某些事情，得到一手真实有效的证据，然后经过深思熟虑的分析，得到某些结论，这显然是不对的。离开实际调查就要产生唯心的阶级估量和唯心的工作指导，
那么，它的结果，不是机会主义，便是盲动主义。</p>
<p>关心群众的生活问题，我觉得这一点，现在做的十分好，我是国家级贫困县出身的人，我能看到的是当地的政府工作人员对于当地的很多事情都是十分负责、尽心的。去年是扶贫大年，好多乡政府都想办法带动当地的村民去创业实现长久致富，这都是让当地人感到很开心的事情。前些日子家里发了大水，同志们都是和群众打成一片齐心抗洪的，没有一个人说不理会群众之类的，一个都没有。</p>
<p>关于毛对战争的理解，除了战争本身外，我最敬佩的便是其中对未来的指导：<code>人类社会进步到消灭了阶级，消灭了国家，到了那时，什么战争也没有了，反革命战争没有了，革命战争也没有了，非正义战争没有了，正义战争也没有了，这就是人类的永久和平的时代。我们研究革命战争的规律，出发于我们要求消灭一切战争的志愿，这是区别我们共产党人和一切剥削阶级的界线。</code>这个便是我们无产阶级要为之奋斗一生的目标。</p>
]]></content>
      <tags>
        <tag>毛选</tag>
        <tag>日记</tag>
      </tags>
  </entry>
  <entry>
    <title>日记（2）</title>
    <url>/2021/1220239800.html</url>
    <content><![CDATA[<p>早上八点，起床，下了床墨迹了一会儿，醒醒了脑子，再一看时间，已经八点四十了，呕吼，穿上袜子穿上鞋，刷个牙，洗把脸，再抹一曾润肤乳，完事。</p>
<p>九点，下楼去食堂吃饭，磨磨唧唧到食堂又是五分钟后了，所幸还有饭，一个鸡蛋一个大饼一杯豆浆，肉蛋奶都有了，吃完饭回到寝室就是九点四十了。</p>
<span id="more"></span>
<p>为什么今天没有直接去图书馆呢？因为今天有个面试，什么面试呢？腾讯的一个面试，为什么会有这么一个面试呢？因为有个老哥让我扫了个二维码，我扫完二维码，填了姓名学习院校后居然就成功投递了简历，然后笔试都没有就收到了鹅厂的面试邀请，我也挺懵的，其实也还好，可以面试一下看看自己有多菜。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%91%B8%E9%B1%BC%E6%97%A5%E8%AE%B0%EF%BC%882%EF%BC%89/image-20210811225211599.png"
alt="image-20210811225211599" /></p>
<p>九点四十，到了宿舍，打开力扣，看了一下水友讲的鹅厂大概会面试的题，又做了一遍，再打开
B 站，又看了一会儿 <a href="https://space.bilibili.com/415434293">Pink
老师</a>的前端课程，磨叽磨叽就到了十一点。</p>
<p>十一点，开始面试，十一点刚到就打开了面试窗口，但是 hr
没有来，于是就等了 23
秒，她终于来了，而且还是个声音十分温柔的姐姐，希望是个姐姐吧，不然我的心态会出问题的。接下来半个小时，我和这位声音十分甜美的姐姐度过了愉快的一段时间（是的）。</p>
<p>十一点半，面试结束去吃饭。</p>
<p>十二点，吃完了饭悠悠哉哉去图书馆。</p>
<p>十二点二十三，来到了图书馆找了个位子坐下，去接了杯水，打开了手机，点开了打麻将。我当时心里想的是，我赢一局就去学习，然后打到了两点二十七，一局没赢，我心态炸裂。</p>
<p>两点二十七，我看了一眼时间，距离图书馆关门只有两个半小时了，也该学习了。于是乎，打开课本，怒学两个半小时，去吃饭。</p>
<p>五点二十，来到食堂吃饭。</p>
<p>五点四十五，吃完饭回到了宿舍，打开电脑，打开
wegame，打开英雄联盟。下了一局棋，没赢，不开心两局，那就排位吧，排位都是用的提莫，很舒服，七秒一个蘑菇，满地图都是蘑菇，人在上路补着兵就拿了
ad 的人头，很开心，两局都赢了，很开心，看了一眼时间，七点四十七。</p>
<p>七点四十七，去活动室看书。</p>
<p>九点半，出门健身，锻炼身体，今晚练了腹部和背部，感觉还挺舒服。</p>
<p>十点三十三，回到寝室，看了一眼面试结果，挂了。为什么挂了，因为我投的前端，刚刚学了两天的前端，感觉还行，主要是面试的姐姐说话真的是好温柔，就像是恋爱的感觉，虽然我单身了二十年，准备洗洗睡觉。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/blog/%E6%91%B8%E9%B1%BC%E6%97%A5%E8%AE%B0%EF%BC%882%EF%BC%89/image-20210811230426475.png"
alt="image-20210811230426475" /></p>
]]></content>
      <tags>
        <tag>生活</tag>
        <tag>日记</tag>
        <tag>考研日记</tag>
      </tags>
  </entry>
  <entry>
    <title>手写Promise</title>
    <url>/2022/2502972644.html</url>
    <content><![CDATA[<h2 id="初始结构">初始结构</h2>
<p>我们在 <code>New</code> 一个 <code>Promise</code>
里的时候肯定是需要传入参数的，不然这个实例用处不大，而这个参数我们知道是一个函数，而且当我们传入这个函数参数的时候，这个函数参数会被自动执行。
因此我们需要在类的 <code>constructor</code> 里面添加一个参数，这里就用
<code>func</code>
来作为形参，并且执行一下这个参数，接下来需要为这个函数参数传入他自己的参数，也就是
<code>resolve</code> 和 <code>reject</code>，原生的 Promise 里面可以传入
<code>resolve</code>，<code>reject</code>
两个参数，那么我们也得允许手写这边可以传入这两个参数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">func</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>
<p>但是这样写明显有问题，因为手写这边不知道在哪里调用
<code>resolve</code> 和 <code>reject</code> 这两个参数，毕竟
<code>resolve</code> 和 <code>reject</code>
还没有定义。因此，就需要创造出这两个对象，有一点我们要知道的是，<code>resolve</code>、<code>reject</code>
也是以函数的形式来执行的，我们在原生 <code>Promise</code> 里也是在
<code>resolve</code> 或者 <code>reject</code>
后面加个括号来执行的，因此我们可以用类方法的形式，来创建这两个函数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么这里的 <code>resolve</code>，<code>reject</code>
方法应该如何执行呢？里面应该写什么内容呢。这就需要用到状态了。
Promise有三种状态，分别是 <code>pending</code>，<code>fulfilled</code>
和 <code>rejected</code>。初始的时候是
<code>pending</code>，<code>pending</code> 可以转为
<code>fulfilled</code> 状态，但是不能逆转，<code>pending</code>
也可以转为 <code>rejected</code>
状态，但是也不能逆转。<code>fulfilled</code> 和 <code>rejected</code>
之间也不能互转</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129134733.png"
alt="20220129134733" /></p>
<p>因此，需要提前先把这些状态定义好，可以用const来创建外部的固定变量，但是这里为了统一，就用
<code>static</code>
来创建静态属性，创建了状态属性以后，还需要为每一个实例添加一个状态属性，这里就用
<code>this.status</code>，这个状态属性默认就是<code>待定状态</code>。这样在每一个实例被创建以后，就会有自身的状态属性可以进行判断和变动了</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'待定'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'成功'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'拒绝'</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>
        <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么在执行 <code>resolve</code>
的时候，就需要判断状态是否为待定，如果是待定的话，就把状态改为成功；同样的道理，在执行
<code>reject</code>
时候，就需要判断状态是否为待定，如果是待定的话，就把状态改为拒绝。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'待定'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'成功'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'拒绝'</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>
        <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再回忆一下原生 <code>Promise</code>，在执行 <code>resolve</code> 或者
<code>reject</code>
的时候，都是可以传入一个参数，这样我们后面就可以使用这个参数了。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> Promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'zepoch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>我们可以把这个结果参数命名为
<code>result</code>，不管是成功还是拒绝的结果，两者选其一我们让每个实例都有
<code>result</code> 属性，并且给他们都负值 <code>null</code>，这里给空值
<code>null</code> 是因为执行 resolve 或者 reject
的时候会给结果赋值，接着我们就可以给 <code>resolve</code>
添加参数，并且把参数负值给实例的 <code>result</code> 属性，为
<code>reject</code>添加参数，并且为参数负值给实例resort属性。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'待定'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'成功'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'拒绝'</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129172325.png"
alt="20220129172325" /></p>
<h2 id="this-指向">this 指向</h2>
<p>但是此时却出现了一些问题，但是从报错的信息里面我们貌似发现不了有什么错误，因为
<code>status</code> 属性我们已经创建了，不应该是
<code>undefined</code>，但我们仔细看看 <code>status</code>，前面是有
<code>this</code> 关键字的，那么只有一种可能，要用
<code>this.status</code> 的时候并没有调用 <code>constructor</code> 里的
<code>this.status</code>，也就是这里的 <code>this</code>
已经跟丢了。我们在 <code>new</code> 一个新实例的时候，执行的是
<code>constructor</code> 里的内容，也就是 <code>constructor</code> 里的
<code>this</code>
确实是新实例的，但现在我们是在新实例被创建后，再在外部环境下执行
<code>resolve</code> 方法的，这里的 <code>resolve</code>
看着像是和实例一起执行的，其实不然，也就相当于不在 <code>class</code>
内部使用这个 <code>this</code>，而我们。没有在外部定义任何
<code>status</code> 变量，因此这里会报错。解决 <code>class</code> 的
<code>this</code>
指向问题，一般会用<code>箭头函数</code>，<code>bind</code>或者
<code>proxy</code>，在这里我们就可以使用 <code>bind</code> 来绑定
<code>this</code>。只需要在 <code>this.resolve</code> 和
<code>this.reject</code> 后加上
<code>bind(this)</code>，刷新之后便不报错了</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'待定'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'成功'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'拒绝'</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129172340.png"
alt="20220129172340" /></p>
<p>对 <code>resolve</code> 来说，这里就是给实例的 <code>resolve</code>
方法，绑定这个 <code>this</code> 为当前实例对象，并且执行
<code>this.resolve</code> 方法；对于 <code>reject</code>
来说，这里就是给实例的 <code>reject</code> 方法绑定这个
<code>this</code> 为当前的实例对象，并且执行 <code>this.reject</code>
方法。</p>
<h2 id="then">then</h2>
<p>原生的 <code>then</code> 方法，<code>then</code>
方法可以传入两个参数，这两个参数都是函数，一个是当状态为成功时执行的代码，另一个是当状态为拒绝时执行的代码</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'zepoch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'zepoch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
    <span class="token parameter">result</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token parameter">result</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因此我们就可以先给手写的店里面添加两个参数。一个是
<code>onFULFILLED</code>，表示状态为成功时，另一个是
<code>onREJECTED</code>，表示状态为拒绝时，这里我们先看看原生
<code>Promise</code> 产生的结果。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129205912.png"
alt="20220129205912" /></p>
<p>可以看到控制台只显示了一个 <code>console</code>
的结果。证明只会执行成功状态或者拒绝状态其中一个，因此我们在手写的时候就必须进行判断。如果当前实力的stands状态属性为成功的话，我们就执行传进来的
<code>onFULFILLED</code> 函数，并且为 <code>onFULFILLED</code>
函数传入前面保留的 <code>result</code> 属性值，如果当前实例的
<code>status</code>
状态属性为拒绝的话。我们就执行传进来的<code>onREJECTED</code>
函数，并且为 <code>onREJECTED</code> 函数传入前面保留的
<code>result</code> 属性值。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'待定'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'成功'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'拒绝'</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFULFILLED<span class="token punctuation">,</span> onREJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">onFULFILLED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">onREJECTED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>定义好了判断条件以后，我们就来测试一下代码。也是一样，在实例上使用
<code>then</code>
方法，我们来看看控制台，会发现这里并没有报错，也就是暂时安全了。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129210813.png"
alt="20220129210813" /></p>
<p>为什么说暂时安全了呢？手写 <code>Promise</code>
的时候，有一个难点，就在于有很多地方需要和原生一样严谨。也就是说，原生的
<code>Promise</code>
会考虑很多特殊情况，我们在实际运用时可能暂时不会碰到这些情况，可是当我们遇到的时候，却不知底层的原理，这就是为什么我们要知道如何手写
<code>Promise</code>。</p>
<h2 id="执行异常">执行异常</h2>
<p>如果在 <code>new Promise</code>
的时候。执行函数里面我们抛出错误，是会触发<code>拒绝</code>方法，也就是在原生的
<code>promise</code> 里面调用 <code>then</code>
方法时可以把错误的信息作文内容输出出来</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129211639.png"
alt="20220129211639" /></p>
<p>但是如果我们在手写这边写上同样道理的代码，很多人会忽略这个细节，我们看看控制台。这个时候就是报错了，而且没有把内容输出出来。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129211754.png"
alt="20220129211754" /></p>
<p>于是我们就可以在执行 <code>resolve</code> 和 <code>reject</code>
之前进行判断，可以用 <code>try</code> 和 <code>catch</code> 在
<code>constructor</code>
里面完善代码，当生成实力的时候判断是否有报错，如果没有报错的话就按照正常执行
<code>resolve</code> 和 <code>reject</code>
方法，如果报错的话，就把错误信息传入给 <code>reject</code>
方法，并且直接执行 <code>reject</code> 方法。注意，这里不需要给
<code>reject</code> 方法进行 <code>this</code>
的绑定了，因为这里是直接执行而不是创建实例后再执行。现在我们再刷新一下控制台，就能看出手写这边没有报错了。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129212346.png"
alt="20220129212346" /></p>
<p>原生 <code>Promise</code> 里规定 <code>then</code>
里面的两个参数，如果不是函数的话就要被忽略,所以需要把不是函数的参数改为函数，这里我们就可以用条件运算符，我们在进行if判断之前。进行预先判断，如果
<code>onFULFILLED</code> 参数是一个函数，就把原来的
<code>onFULFILLED</code> 的内容重新复制给他，如果
<code>onFULFILLED</code> 参数不是一个函数，就把它改为空函数，如果
<code>onREJECTED</code> 参数。是一个函数，就把原来的
<code>onREJECTED</code> 的内容重新复制给他，如果 <code>onREJECTED</code>
参数不是一个函数。就把它改为空函数，现在我们再来查看一下控制台的时候，就没有发现报错了。</p>
<h2 id="异步">异步</h2>
<p>在手写代码里面。依旧没有植入异步功能，毕竟最基本的
<code>setTimeout</code> 我们都没有使用，但是我们必须先了解一下原生
<code>Promise</code> 的一些运行顺序规则。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129214909.png"
alt="20220129214909" /></p>
<p>我们配合这段原生 <code>Promise</code>
代码结合控制台一起看看，首先执行第一步，接着创建 <code>promise</code>
实例并且输出第二步，因为这里依旧是同步，接着碰到 <code>resolve</code>
的时候，修改结果，值到了 <code>promise.then</code>
会进行异步操作，也就是我们需要先把执行栈的内容清空，于是就执行第三步，接着才会执行
<code>promise.then</code>
里面的内容，也就是最后输出<code>zepoch</code>。
我们用同样的测试代码应用在手写代码上面，也就是在手写代码写上步骤的信息，然后node运行</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129215225.png"
alt="20220129215225" /></p>
<p>这次我们发现有些不同了，第一第二步都没有问题，问题就是<code>zepoch</code>和第三步，这里的顺序不对。其实问题很简单，就是我们刚刚说的没有设置异步执行，所以直接给
<code>then</code> 方法里面添加 <code>setTimeout</code>
就可以了，我们需要在进行if判断以后再添加
<code>setTimeout</code>，要不然状态不符合添加异步也是没有意义的，然后在
<code>setTimeout</code> 里执行传入的函数参数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'待定'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'成功'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'拒绝'</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFULFILLED<span class="token punctuation">,</span> onREJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        onFULFILLED <span class="token operator">=</span> <span class="token keyword">typeof</span> onFULFILLED <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onFULFILLED</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        onREJECTED <span class="token operator">=</span> <span class="token keyword">typeof</span> onREJECTED <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onREJECTED</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token function">onFULFILLED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token function">onREJECTED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在我们看看控制台。这次的顺序就比较顺眼了</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129215855.png"
alt="20220129215855" /></p>
<p>不过异步的问题真的解决了吗？现在又要进入 <code>Promise</code>
另一个难点了，我们来给原生的 <code>Promise</code> 里添加
<code>setTimeout</code>，使得 <code>resolve</code>
也进行异步执行，那么就会出现一个问题了，<code>resolve</code>
是异步的，<code>then</code>也是异步的，究竟谁会先被调用呢？</p>
<p>我们看看控制台，步骤是按照我标注的正常顺序来的。特别要注意的是，当遇到
<code>setTimeout</code> 的时候被异步执行了，而
<code>resolve('zepoch')</code>没有被马上执行，而是先执行第四步，等到
<code>then</code> 的时候再执行 <code>resolve</code> 里保存的值。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129220439.png"
alt="20220129220439" /></p>
<p>我们用同样的代码应用到手写的部分，先来看看控制台。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129220904.png"
alt="20220129220904" /></p>
<p>可以发现<code>zepoch</code>并没有输出，我们可以。先猜测一下没有输出的原因，很可能是因为
<code>then</code> 方法没有被执行，看看 <code>then</code>
方法里面是根据条件判断来执行代码的，也就是说。很可能没有符合的条件，再换句话说，可能没有符合的状态，那么我们就在三个位置分别输出当前的状态，这样分别来判断哪个位置出了问题。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220129221345.png"
alt="20220129221345" /></p>
<p>现在在看看控制台，发现。只有两组状态被输出，这两组都在第四步前被输出了。证明
<code>setTimeout</code> 里面的状态都被输出了，只有 <code>then</code>
里面的状态没有被输出，那基本就能确定是因为 <code>then</code>
里面的状态判断出了问题。
执行第一，第二，第三步的时候，就要开始处理异步了。这里肯定是因为先执行了
<code>then</code>
方法又发现这个时候状态依旧是待定，而我们手写部分没有定义待定状态的时候应该做什么，因此。就少了
<code>zepoch</code> 这句话的输出了，所以我们就直接给 <code>then</code>
方法里面添加待定状态的情况就可以了，也就是用 <code>if</code>
进行判断。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFULFILLED<span class="token punctuation">,</span> onREJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    onFULFILLED <span class="token operator">=</span> <span class="token keyword">typeof</span> onFULFILLED <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onFULFILLED</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    onREJECTED <span class="token operator">=</span> <span class="token keyword">typeof</span> onREJECTED <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onREJECTED</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onFULFILLED<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onREJECTED<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token function">onFULFILLED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token function">onREJECTED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是问题来了。当在里面判断到待定状态时，我们要干什么？ 因为这个时候
<code>resolve</code> 或者 <code>reject</code>
还没有获取到任何值。因此，我们必须让 <code>then</code>
里的函数稍后再执行的，等 <code>resolve</code> 执行了以后，再执行
<code>then</code>，为了保留 <code>then</code>
里的函数，我们可以创建数组来保存函数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在实例化对象的时候就让每一个实例都有这两个数组，一个数组保存
<code>resolve</code> 函数，另一个数组保存 <code>reject</code>
函数，为什么是数组呢？因为数组是先入先出的顺序，接着就完善
<code>then</code> 里面的代码，也就是当判断到状态为待定时，暂且把
<code>then</code>
里的两个函数参数分别放在两个数组里面，数组里面放完函数以后就可以完善
<code>resolve</code> 和 <code>reject</code> 代码了。 在执行
<code>resolve</code> 或者 <code>reject</code> 的时候，遍历自身的
<code>callback</code> 数组。看看数组里面有没有 <code>then</code>
那边保留过来的待执行函数，然后逐个执行数组里面的函数，执行的时候会传入相应的参数</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token function">callback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token function">callback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后我们修改一下实例里面的代码，并且同时用 <code>resolve</code> 和
<code>reject</code>，为了看看是否会同时出现两种状态的值，是否有这样的错误。结果我们可以看到代码顺序，还是不太对。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220130001359.png"
alt="20220130001359" /></p>
<p>这里有个小细节，<code>resolve</code> 和 <code>reject</code>
是要在事件循环末尾执行的，因此我们就给 <code>resolve</code> 和
<code>reject</code> 里面加上
<code>setTimeout</code>，然后把原来的代码复制上去就可以了，现在再来看看控制台，就会发现没有错误了。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220130224337.png"
alt="20220130224337" /></p>
<p>首先进行第一步，然后 <code>new</code> 一个实例进行，第二步遇到
<code>setTimeout</code> 的时候进行异步操作，然后运行实例的
<code>then</code>
方法，发现依旧是待定状态，就把函数参数放到数组里面保存起来。然后进行第三步，现在又要回头去执行刚刚
<code>setTimeout</code> 里面的内容，要执行 <code>resolve</code>
的时候发现又要 <code>setTimeout</code>
异步处理，于是就执行第四步，最后再来执行
<code>resolve</code>，也就是改变状态，改变结果值，并且遍历刚刚保存的数组对象，最后执行刚刚保存的函数对象，然后就输出
<code>zepoch</code> 了</p>
<h2 id="链式">链式</h2>
<p>现在我们已经越来越接近胜利了，我修改一下代码，来看一下
<code>promise</code> 的链式功能。也就是 <code>then</code> 后面又有一个
<code>then</code>，毫无疑问在控制台里面是会报错的</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome/blog/手写Promise/20220130225239.png"
alt="20220130225239" /></p>
<p>为了可以实现链式功能，我们需要让 <code>then</code> 方法返回一个新的
<code>promise</code>，返回一个新的 <code>promise</code>
以后。他就有自己的 <code>then</code>
方法，这样就能实现无限的链式，现在我们就在 <code>then</code>
方法里面返回一个新的手写 <code>Promise</code>
实例，再把原来的代码复制上去就可以了。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFULFILLED<span class="token punctuation">,</span> onREJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        onFULFILLED <span class="token operator">=</span> <span class="token keyword">typeof</span> onFULFILLED <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onFULFILLED</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        onREJECTED <span class="token operator">=</span> <span class="token keyword">typeof</span> onREJECTED <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onREJECTED</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onFULFILLED<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onREJECTED<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token function">onFULFILLED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token function">onREJECTED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>全部代码如下</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'待定'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'成功'</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'拒绝'</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                    <span class="token function">callback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                    <span class="token function">callback</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFULFILLED<span class="token punctuation">,</span> onREJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            onFULFILLED <span class="token operator">=</span> <span class="token keyword">typeof</span> onFULFILLED <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onFULFILLED</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
            onREJECTED <span class="token operator">=</span> <span class="token keyword">typeof</span> onREJECTED <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onREJECTED</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onFULFILLED<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onREJECTED<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                    <span class="token function">onFULFILLED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> Promise<span class="token punctuation">.</span><span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                    <span class="token function">onREJECTED</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>这个生化怎么这么多啊</title>
    <url>/2021/887319650.html</url>
    <content><![CDATA[<p>复习考研，第一门难啃的课就是生物化学，三本书，将近两千页的内容，全是字，淦，怎么背的会哦，当年就是生物化学没有学好，才落得现在没得保研，只能呆呆地考研，谁知道考研也需要学生物化学！淦，我心态炸裂。</p>
<span id="more"></span>
<p>但其实看看也还挺不错的，确实感觉到自己的脑袋里关于生物化学的好多东西都是并不是很清楚，虽然是做过很多的实验，但是好多实验的原理也是在重新开始看书后才真正了解。（对于我大学时期做过的实验，也许我真的了解的也就是操作系统，数据结构之类的了）但是到现在也才看到三百多页是真的心情很不好，确实感觉到自己对于生物这个需要花费很大功夫来背诵的科目感到不是很舒服。关键这东西也不是什么马原毛概之类的，我倒是觉得马原毛概之类的倒是挺有意思的，想起来了看一看，一看就是半本书，还停不下来，确实是因为其中包含了很多的解决问题的方法，很多的哲学的思考，很多的看了让人感到心情极其振奋的思想。</p>
<p>昨晚失眠到了三点多，今天又是八点起的，中午居然还没睡，中午摸了一下脸颊下巴两侧又是张出了痘痘，懊恼，我怎么就这么运气不好哦，要是生物有写代码那么容易就好了。</p>
<p>前路漫漫，读书作伴。</p>
]]></content>
      <tags>
        <tag>生活</tag>
        <tag>生物化学</tag>
      </tags>
  </entry>
  <entry>
    <title>日记（4）</title>
    <url>/2021/1842364004.html</url>
    <content><![CDATA[<p>呕吼，突然就过去了一个月，上一次更新博客还是上一次（确实）。那就回顾一下这个月做了些什么、发生了些什么吧。</p>
<p>八月底大概就是和辅导员谈话、迎新相关的事务了，考研呢也是磨磨蹭蹭的没怎么放在心上（虽然现在看来不用当时甚至都不用管考研的事情）。</p>
<span id="more"></span>
<p>当时有个很有意思的事情就是把《天龙八部》看了一遍，有一说一嗷，那是真的好看，段誉的凌波微步，语嫣的博识多闻，萧峰的英雄自我，虚竹的纯真善良，算是我看的第一部武侠片了，剧情相对来说也是很不错的，近些年的仙侠剧倒是都没看过，唯一看过的就是初中时看过的《兰陵王》了，相比较而言《天龙八部》真的是好太多了。</p>
<p>后来就步入了九月，周一周二还有一节课，占用时间不算很多，周五要去国际处值班，倒是成了我为数不多与人打交道的机会。</p>
<p>后来就是保研竞赛加分答辩了，这个真的是太搞心态了。十号去交了材料，十三号答辩，结果我忘记，十三号正好还有课，自己和自己生气索性就不去了。然后辅导员问我还去不去答辩了，毕竟能加三分来着；然后问辅导员我们专业能保研多少呢？答曰五人。我这一听啊，那就不去了呗，我这名词本来就是十名开外了，于是呢，最后便是真的没有去答辩，也没有加分。</p>
<p>第二天，保研名额出了，能保研八个人，我心态瞬间就崩了，本来没有去加分答辩就很生气，现在保研名额增加了就更生气了。那得了，终究还是变成了真正的考研人。</p>
<p>然后到了十六号，呜呼，同济的官网发布信息，考研生物信息学的话要必须考生物信息，得嘞，复习两个月的生物化学、分子生物学都用不上了，又要重新开始学习了。你说巧不巧，居然还正好距考研有百天时间。</p>
<p>也许能复习完吧，也许吧。</p>
]]></content>
      <tags>
        <tag>生活</tag>
        <tag>日记</tag>
        <tag>考研</tag>
        <tag>摸鱼</tag>
      </tags>
  </entry>
  <entry>
    <title>配置 Gitalk 评论系统</title>
    <url>/2021/3238021801.html</url>
    <content><![CDATA[<p>新搭建完成了 Hexo
博客，我想让他拥有一个评论系统，这需要借助插件的力量。找来找去，找到了
<a href="https://gitalk.github.io/">Gitalk Demo |
Aotu.io「凹凸实验室」</a>，也是 Next 主题支持的评论系统。</p>
<p>首先需要在 <a href="https://github.com/settings/developers">Developer
applications (github.com)</a> 新建一个 OAuth applications 。</p>
<span id="more"></span>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210717145357156.png"
alt="image-20210717145357156" /></p>
<p>填写上应用名称，主页地址，应用描述和回调地址便是可以了。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210717150243955.png"
alt="image-20210717150243955" /></p>
<p>在这里你可以看到你的 Client ID 以及生成 Client secrets。</p>
<p>可以新建一个仓库来存放评论，也可以直接将评论存放到你存放博客的仓库。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210717150152175.png"
alt="image-20210717150152175" /></p>
<p>接下来，打开 Next 主题下的 _config.yml 配置文件，搜索
gitalk，便是找到了我们的 gitalk 配置。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210717150442412.png"
alt="image-20210717150442412" /></p>
<p>将 enable 设置为 true，写入之前我们设置好的
评论仓库的名字，以及生成的 client_id 和 client_secret，便是可以了。</p>
<p>之后便是日常的发布到 github 了，让我们来测试一下是否是
配置成功吧！</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210717151022732.png"
alt="image-20210717151022732" /></p>
<p>配置很成功哦！如果出现了下图的情况，可以点击使用 github
登陆初始化便可。</p>
<p><img
src="https://cdn.jsdelivr.net/gh/zEpoch/imageHome@main/img/image-20210717151100839.png"
alt="image-20210717151100839" /></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
